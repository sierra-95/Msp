
rx_tx_char.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 000000e0  00000000  00000000  00000978  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000615  00000000  00000000  00000a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000157  00000000  00000000  0000106d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003a5  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a8  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000123  00000000  00000000  00001614  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000012b  00000000  00000000  00001737  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8a:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_SetBaudRate>:
                 the default baudrate of 9600 is set.

		    Refer uart.h file for Supported range of baud rates.
***************************************************************************************************/
void UART_SetBaudRate(uint32_t var_baudRate_u32)
{
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	6b 01       	movw	r12, r22
  9c:	7c 01       	movw	r14, r24
	uint16_t RegValue;

	if((var_baudRate_u32 >= C_MinBaudRate_U32) && (var_baudRate_u32<=C_MaxBaudRate_U32))
  9e:	dc 01       	movw	r26, r24
  a0:	cb 01       	movw	r24, r22
  a2:	80 56       	subi	r24, 0x60	; 96
  a4:	99 40       	sbci	r25, 0x09	; 9
  a6:	a0 40       	sbci	r26, 0x00	; 0
  a8:	b0 40       	sbci	r27, 0x00	; 0
  aa:	81 3a       	cpi	r24, 0xA1	; 161
  ac:	28 eb       	ldi	r18, 0xB8	; 184
  ae:	92 07       	cpc	r25, r18
  b0:	21 e0       	ldi	r18, 0x01	; 1
  b2:	a2 07       	cpc	r26, r18
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	b2 07       	cpc	r27, r18
  b8:	c0 f4       	brcc	.+48     	; 0xea <UART_SetBaudRate+0x58>
	{
		/* Check if the requested baudate is within range,
	     If yes then calculate the value to be loaded into baud rate generator. */
		RegValue = M_GetBaudRateGeneratorValue(var_baudRate_u32);
  ba:	c7 01       	movw	r24, r14
  bc:	b6 01       	movw	r22, r12
  be:	28 ef       	ldi	r18, 0xF8	; 248
  c0:	3f ef       	ldi	r19, 0xFF	; 255
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	5f ef       	ldi	r21, 0xFF	; 255
  c6:	0e 94 a5 00 	call	0x14a	; 0x14a <__mulsi3>
  ca:	60 50       	subi	r22, 0x00	; 0
  cc:	7c 4d       	sbci	r23, 0xDC	; 220
  ce:	8b 40       	sbci	r24, 0x0B	; 11
  d0:	9f 4f       	sbci	r25, 0xFF	; 255
  d2:	a7 01       	movw	r20, r14
  d4:	96 01       	movw	r18, r12
  d6:	e4 e0       	ldi	r30, 0x04	; 4
  d8:	22 0f       	add	r18, r18
  da:	33 1f       	adc	r19, r19
  dc:	44 1f       	adc	r20, r20
  de:	55 1f       	adc	r21, r21
  e0:	ea 95       	dec	r30
  e2:	d1 f7       	brne	.-12     	; 0xd8 <UART_SetBaudRate+0x46>
  e4:	0e 94 c4 00 	call	0x188	; 0x188 <__udivmodsi4>
  e8:	02 c0       	rjmp	.+4      	; 0xee <UART_SetBaudRate+0x5c>
	}
	else
	{
		/*	 Invalid baudrate requested, hence set it to default baudrate of 9600 */
		RegValue = M_GetBaudRateGeneratorValue(9600);
  ea:	27 e6       	ldi	r18, 0x67	; 103
  ec:	30 e0       	ldi	r19, 0x00	; 0
	}

	UBRRL = util_ExtractByte0to8(RegValue);
  ee:	29 b9       	out	0x09, r18	; 9
	UBRRH = util_ExtractByte8to16(RegValue);
  f0:	30 bd       	out	0x20, r19	; 32
}
  f2:	ff 90       	pop	r15
  f4:	ef 90       	pop	r14
  f6:	df 90       	pop	r13
  f8:	cf 90       	pop	r12
  fa:	08 95       	ret

000000fc <UART_Init>:

		    Refer uart.h file for Supported(range) baud rates.		
***************************************************************************************************/
void UART_Init(uint32_t var_baudRate_u32)
{
	UCSRB= (1<<RXEN) | (1<<TXEN);                  // Enable Receiver and Transmitter
  fc:	28 e1       	ldi	r18, 0x18	; 24
  fe:	2a b9       	out	0x0a, r18	; 10
	UCSRC= (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);   // Asynchronous mode 8-bit data and 1-stop bit
 100:	26 e8       	ldi	r18, 0x86	; 134
 102:	20 bd       	out	0x20, r18	; 32
	UCSRA= 0x00;                                   // Clear the UASRT status register
 104:	1b b8       	out	0x0b, r1	; 11
	UART_SetBaudRate(var_baudRate_u32);
 106:	0e 94 49 00 	call	0x92	; 0x92 <UART_SetBaudRate>
}
 10a:	08 95       	ret

0000010c <UART_RxChar>:
 * description :This function is used to receive a char from UART module.
                It waits till a char is received and returns it after reception.
***************************************************************************************************/
char UART_RxChar()
{
	while(util_IsBitCleared(UCSRA,RXC));  // Wait till the data is received
 10c:	5f 9b       	sbis	0x0b, 7	; 11
 10e:	fe cf       	rjmp	.-4      	; 0x10c <UART_RxChar>
	return(UDR);                          // return the received char
 110:	8c b1       	in	r24, 0x0c	; 12
}
 112:	08 95       	ret

00000114 <UART_TxChar>:

 * description  :This function is used to transmit a char through UART module.
***************************************************************************************************/
void UART_TxChar(char var_uartData_u8)
{
	while(util_IsBitCleared(UCSRA,UDRE)); // Wait till Transmitter(UDR) register becomes Empty
 114:	5d 9b       	sbis	0x0b, 5	; 11
 116:	fe cf       	rjmp	.-4      	; 0x114 <UART_TxChar>
	UDR =var_uartData_u8;                              // Load the data to be transmitted
 118:	8c b9       	out	0x0c, r24	; 12
}
 11a:	08 95       	ret

0000011c <UART_TxString>:
               1.The ptr_stringPointer_u8 points to the first char of the string
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	ec 01       	movw	r28, r24
	while(*ptr_stringPointer_u8)
 122:	02 c0       	rjmp	.+4      	; 0x128 <UART_TxString+0xc>
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
 124:	0e 94 8a 00 	call	0x114	; 0x114 <UART_TxChar>
                    and traverses till the end(NULL CHAR) and transmits a char each time
***************************************************************************************************/
#if (Enable_UART_TxString==1)
void UART_TxString(char *ptr_stringPointer_u8)
{
	while(*ptr_stringPointer_u8)
 128:	89 91       	ld	r24, Y+
 12a:	88 23       	and	r24, r24
 12c:	d9 f7       	brne	.-10     	; 0x124 <UART_TxString+0x8>
		UART_TxChar(*ptr_stringPointer_u8++);// Loop through the string and transmit char by char
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <main>:
void main() 
{
   	 char ch;

  /* Initilize the UART before Transmitting/Receiving any data */
    UART_Init(9600);
 134:	60 e8       	ldi	r22, 0x80	; 128
 136:	75 e2       	ldi	r23, 0x25	; 37
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 7e 00 	call	0xfc	; 0xfc <UART_Init>

   while(1)
    {
	    /*Receive and Transmit a char indefinitely at 9600 baud rate */
	     ch=UART_RxChar(); // Receive a char and store it in "ch"
 140:	0e 94 86 00 	call	0x10c	; 0x10c <UART_RxChar>
        
         UART_TxChar(ch);  //Transmit the received char
 144:	0e 94 8a 00 	call	0x114	; 0x114 <UART_TxChar>
 148:	fb cf       	rjmp	.-10     	; 0x140 <main+0xc>

0000014a <__mulsi3>:
 14a:	62 9f       	mul	r22, r18
 14c:	d0 01       	movw	r26, r0
 14e:	73 9f       	mul	r23, r19
 150:	f0 01       	movw	r30, r0
 152:	82 9f       	mul	r24, r18
 154:	e0 0d       	add	r30, r0
 156:	f1 1d       	adc	r31, r1
 158:	64 9f       	mul	r22, r20
 15a:	e0 0d       	add	r30, r0
 15c:	f1 1d       	adc	r31, r1
 15e:	92 9f       	mul	r25, r18
 160:	f0 0d       	add	r31, r0
 162:	83 9f       	mul	r24, r19
 164:	f0 0d       	add	r31, r0
 166:	74 9f       	mul	r23, r20
 168:	f0 0d       	add	r31, r0
 16a:	65 9f       	mul	r22, r21
 16c:	f0 0d       	add	r31, r0
 16e:	99 27       	eor	r25, r25
 170:	72 9f       	mul	r23, r18
 172:	b0 0d       	add	r27, r0
 174:	e1 1d       	adc	r30, r1
 176:	f9 1f       	adc	r31, r25
 178:	63 9f       	mul	r22, r19
 17a:	b0 0d       	add	r27, r0
 17c:	e1 1d       	adc	r30, r1
 17e:	f9 1f       	adc	r31, r25
 180:	bd 01       	movw	r22, r26
 182:	cf 01       	movw	r24, r30
 184:	11 24       	eor	r1, r1
 186:	08 95       	ret

00000188 <__udivmodsi4>:
 188:	a1 e2       	ldi	r26, 0x21	; 33
 18a:	1a 2e       	mov	r1, r26
 18c:	aa 1b       	sub	r26, r26
 18e:	bb 1b       	sub	r27, r27
 190:	fd 01       	movw	r30, r26
 192:	0d c0       	rjmp	.+26     	; 0x1ae <__udivmodsi4_ep>

00000194 <__udivmodsi4_loop>:
 194:	aa 1f       	adc	r26, r26
 196:	bb 1f       	adc	r27, r27
 198:	ee 1f       	adc	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	a2 17       	cp	r26, r18
 19e:	b3 07       	cpc	r27, r19
 1a0:	e4 07       	cpc	r30, r20
 1a2:	f5 07       	cpc	r31, r21
 1a4:	20 f0       	brcs	.+8      	; 0x1ae <__udivmodsi4_ep>
 1a6:	a2 1b       	sub	r26, r18
 1a8:	b3 0b       	sbc	r27, r19
 1aa:	e4 0b       	sbc	r30, r20
 1ac:	f5 0b       	sbc	r31, r21

000001ae <__udivmodsi4_ep>:
 1ae:	66 1f       	adc	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	88 1f       	adc	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	1a 94       	dec	r1
 1b8:	69 f7       	brne	.-38     	; 0x194 <__udivmodsi4_loop>
 1ba:	60 95       	com	r22
 1bc:	70 95       	com	r23
 1be:	80 95       	com	r24
 1c0:	90 95       	com	r25
 1c2:	9b 01       	movw	r18, r22
 1c4:	ac 01       	movw	r20, r24
 1c6:	bd 01       	movw	r22, r26
 1c8:	cf 01       	movw	r24, r30
 1ca:	08 95       	ret

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
