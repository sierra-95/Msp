
Traffic lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000106  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000741  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  00000941  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c9  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000011dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000031e  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  0000154e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  64:	0c 94 81 00 	jmp	0x102	; 0x102 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initialize>:
#define GREEN_LED_PIN PC2

void initialize()
{
	// Set the three LED pins as output
	DDRC |= (1 << RED_LED_PIN) | (1 << YELLOW_LED_PIN) | (1 << GREEN_LED_PIN);
  6c:	84 b3       	in	r24, 0x14	; 20
  6e:	87 60       	ori	r24, 0x07	; 7
  70:	84 bb       	out	0x14, r24	; 20
  72:	08 95       	ret

00000074 <setLED>:
}

void setLED(uint8_t pin)
{
	PORTC |= (1 << pin);
  74:	95 b3       	in	r25, 0x15	; 21
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	02 c0       	rjmp	.+4      	; 0x80 <setLED+0xc>
  7c:	22 0f       	add	r18, r18
  7e:	33 1f       	adc	r19, r19
  80:	8a 95       	dec	r24
  82:	e2 f7       	brpl	.-8      	; 0x7c <setLED+0x8>
  84:	29 2b       	or	r18, r25
  86:	25 bb       	out	0x15, r18	; 21
  88:	08 95       	ret

0000008a <clearLED>:
}

void clearLED(uint8_t pin)
{
	PORTC &= ~(1 << pin);
  8a:	95 b3       	in	r25, 0x15	; 21
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <clearLED+0xc>
  92:	22 0f       	add	r18, r18
  94:	33 1f       	adc	r19, r19
  96:	8a 95       	dec	r24
  98:	e2 f7       	brpl	.-8      	; 0x92 <clearLED+0x8>
  9a:	20 95       	com	r18
  9c:	29 23       	and	r18, r25
  9e:	25 bb       	out	0x15, r18	; 21
  a0:	08 95       	ret

000000a2 <main>:
}

int main(void)
{
	initialize();
  a2:	0e 94 36 00 	call	0x6c	; 0x6c <initialize>

	while (1)
	{
		// Turn on the red LED
		setLED(RED_LED_PIN);
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 3a 00 	call	0x74	; 0x74 <setLED>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	2f eb       	ldi	r18, 0xBF	; 191
  ae:	87 e2       	ldi	r24, 0x27	; 39
  b0:	99 e0       	ldi	r25, 0x09	; 9
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x10>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x1a>
  bc:	00 00       	nop
		_delay_ms(3000); // Delay for 3 seconds

		// Turn off the red LED and turn on the amber LED
		clearLED(RED_LED_PIN);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 45 00 	call	0x8a	; 0x8a <clearLED>
		setLED(YELLOW_LED_PIN);
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	0e 94 3a 00 	call	0x74	; 0x74 <setLED>
  ca:	2f eb       	ldi	r18, 0xBF	; 191
  cc:	87 e2       	ldi	r24, 0x27	; 39
  ce:	99 e0       	ldi	r25, 0x09	; 9
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x2e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x38>
  da:	00 00       	nop
		_delay_ms(3000); // Delay for 3 seconds

		// Turn off the amber LED and turn on the green LED
		clearLED(YELLOW_LED_PIN);
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	0e 94 45 00 	call	0x8a	; 0x8a <clearLED>
		setLED(GREEN_LED_PIN);
  e2:	82 e0       	ldi	r24, 0x02	; 2
  e4:	0e 94 3a 00 	call	0x74	; 0x74 <setLED>
  e8:	2f eb       	ldi	r18, 0xBF	; 191
  ea:	87 e2       	ldi	r24, 0x27	; 39
  ec:	99 e0       	ldi	r25, 0x09	; 9
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x4c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x56>
  f8:	00 00       	nop
		_delay_ms(3000); // Delay for 3 seconds

		// Turn off the green LED and repeat the sequence
		clearLED(GREEN_LED_PIN);
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	0e 94 45 00 	call	0x8a	; 0x8a <clearLED>
 100:	d2 cf       	rjmp	.-92     	; 0xa6 <main+0x4>

00000102 <_exit>:
 102:	f8 94       	cli

00000104 <__stop_program>:
 104:	ff cf       	rjmp	.-2      	; 0x104 <__stop_program>
