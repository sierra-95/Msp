
custom chars.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007e  00800060  000002c8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cbf  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000695  00000000  00000000  0000113f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e8  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  00001d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004dc  00000000  00000000  00002117  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  000025f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3d       	cpi	r26, 0xDE	; 222
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 e7 00 	call	0x1ce	; 0x1ce <main>
  7a:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Cmd>:
#define RS PC0
#define RW PC1
#define EN PC2

void LCD_Cmd(unsigned char cmd){
	LCD_Data_Port = cmd;
  82:	82 bb       	out	0x12, r24	; 18
	LCD_Cmd_Port &= ~(1<<RS); /* RS=0 command reg. */
  84:	85 b3       	in	r24, 0x15	; 21
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	85 bb       	out	0x15, r24	; 21
	LCD_Cmd_Port &= ~(1<<RW); /* RW=0 Write operation */
  8a:	85 b3       	in	r24, 0x15	; 21
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	00 00       	nop
	_delay_us(1);
	LCD_Cmd_Port |= (1<<EN); /* Enable pulse ON */
  92:	85 b3       	in	r24, 0x15	; 21
  94:	84 60       	ori	r24, 0x04	; 4
  96:	85 bb       	out	0x15, r24	; 21
  98:	00 00       	nop
	_delay_us(1);
	LCD_Cmd_Port &= ~(1<<EN); /* Enable pulse OFF */
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	8b 7f       	andi	r24, 0xFB	; 251
  9e:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	83 ef       	ldi	r24, 0xF3	; 243
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <LCD_Cmd+0x22>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <LCD_Cmd+0x28>
  aa:	00 00       	nop
  ac:	08 95       	ret

000000ae <LCD_Char>:
	_delay_ms(2);
}
void LCD_Char (unsigned char char_data){
	LCD_Data_Port = char_data;
  ae:	82 bb       	out	0x12, r24	; 18
	LCD_Cmd_Port |= (1<<RS); /* RS=1 Data reg. */
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	85 bb       	out	0x15, r24	; 21
	LCD_Cmd_Port &= ~(1<<RW); /* RW=0 write operation */
  b6:	85 b3       	in	r24, 0x15	; 21
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	00 00       	nop
	_delay_us(1);
	LCD_Cmd_Port |= (1<<EN); /* Enable Pulse ON */
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	00 00       	nop
	_delay_us(1);
	LCD_Cmd_Port &= ~(1<<EN); /* Enable Pulse ON */
  c6:	85 b3       	in	r24, 0x15	; 21
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	83 ef       	ldi	r24, 0xF3	; 243
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <LCD_Char+0x22>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_Char+0x28>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <LCD_Init>:
	_delay_ms(2);
}
void LCD_Init (void){
	LCD_Cmd_Dir = 0xFF; /* Make LCD command port direction as output pins*/
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	84 bb       	out	0x14, r24	; 20
	LCD_Data_Dir = 0xFF; /* Make LCD data port direction as output pins*/
  de:	81 bb       	out	0x11, r24	; 17
  e0:	83 ed       	ldi	r24, 0xD3	; 211
  e2:	90 e3       	ldi	r25, 0x30	; 48
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <LCD_Init+0xa>
  e8:	00 c0       	rjmp	.+0      	; 0xea <LCD_Init+0x10>
  ea:	00 00       	nop
	_delay_ms(50); /* LCD Power ON delay always >15ms */
	LCD_Cmd(0x02); /* Return display to its home position */
  ec:	82 e0       	ldi	r24, 0x02	; 2
  ee:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	LCD_Cmd(0x38); /* Initialization of 16X2 LCD in 8bit mode */
  f2:	88 e3       	ldi	r24, 0x38	; 56
  f4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	LCD_Cmd(0x0F); /* Display ON Cursor Blinking */
  f8:	8f e0       	ldi	r24, 0x0F	; 15
  fa:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	LCD_Cmd(0x06); /* Auto Increment cursor */
  fe:	86 e0       	ldi	r24, 0x06	; 6
 100:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	LCD_Cmd(0x01); /* Clear display */
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 10a:	08 95       	ret

0000010c <LCD_Clear>:
}
void LCD_Clear(void){
	LCD_Cmd(0x01); /* clear display */
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	LCD_Cmd(0x02); /* Return display to its home position */
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 118:	08 95       	ret

0000011a <LCD_String>:
}
/*Send string to LCD function */
void LCD_String (char *str){
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	8c 01       	movw	r16, r24
	int i;
	/* Send each char of string till the NULL */
	for(i=0;str[i]!=0;i++){
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	d0 e0       	ldi	r29, 0x00	; 0
 128:	03 c0       	rjmp	.+6      	; 0x130 <LCD_String+0x16>
		LCD_Char(str[i]);
 12a:	0e 94 57 00 	call	0xae	; 0xae <LCD_Char>
}
/*Send string to LCD function */
void LCD_String (char *str){
	int i;
	/* Send each char of string till the NULL */
	for(i=0;str[i]!=0;i++){
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	f8 01       	movw	r30, r16
 132:	ec 0f       	add	r30, r28
 134:	fd 1f       	adc	r31, r29
 136:	80 81       	ld	r24, Z
 138:	81 11       	cpse	r24, r1
 13a:	f7 cf       	rjmp	.-18     	; 0x12a <LCD_String+0x10>
		LCD_Char(str[i]);
	}
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <Load_Custom_Char>:
	{0x4,0x16,0xf,0x4,0xf,0x16,0x4,0x0},
	{0x4,0xe,0xe,0xe,0x1f,0x0,0xe,0x0},
	{0x3,0x7,0xd,0x9,0xb,0x1b,0x18,0x00},
};

void Load_Custom_Char(){
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
	/*Load custom char into the CGROM*/
	LCD_Cmd(0x40); // Set CGRAM Address
 14e:	80 e4       	ldi	r24, 0x40	; 64
 150:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	for (int i = 0; i <= 7; i++){
 154:	c0 e0       	ldi	r28, 0x00	; 0
 156:	d0 e0       	ldi	r29, 0x00	; 0
 158:	1b c0       	rjmp	.+54     	; 0x190 <Load_Custom_Char+0x4a>
		for (int j = 0; j <= 7; j++){
			LCD_Char(Custorm_Chars5X8[i][j]);
 15a:	fe 01       	movw	r30, r28
 15c:	ee 0f       	add	r30, r30
 15e:	ff 1f       	adc	r31, r31
 160:	ee 0f       	add	r30, r30
 162:	ff 1f       	adc	r31, r31
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	ec 1b       	sub	r30, r28
 16a:	fd 0b       	sbc	r31, r29
 16c:	e0 0f       	add	r30, r16
 16e:	f1 1f       	adc	r31, r17
 170:	ee 0f       	add	r30, r30
 172:	ff 1f       	adc	r31, r31
 174:	e3 59       	subi	r30, 0x93	; 147
 176:	ff 4f       	sbci	r31, 0xFF	; 255
 178:	80 81       	ld	r24, Z
 17a:	0e 94 57 00 	call	0xae	; 0xae <LCD_Char>

void Load_Custom_Char(){
	/*Load custom char into the CGROM*/
	LCD_Cmd(0x40); // Set CGRAM Address
	for (int i = 0; i <= 7; i++){
		for (int j = 0; j <= 7; j++){
 17e:	0f 5f       	subi	r16, 0xFF	; 255
 180:	1f 4f       	sbci	r17, 0xFF	; 255
 182:	02 c0       	rjmp	.+4      	; 0x188 <Load_Custom_Char+0x42>
 184:	00 e0       	ldi	r16, 0x00	; 0
 186:	10 e0       	ldi	r17, 0x00	; 0
 188:	08 30       	cpi	r16, 0x08	; 8
 18a:	11 05       	cpc	r17, r1
 18c:	34 f3       	brlt	.-52     	; 0x15a <Load_Custom_Char+0x14>
};

void Load_Custom_Char(){
	/*Load custom char into the CGROM*/
	LCD_Cmd(0x40); // Set CGRAM Address
	for (int i = 0; i <= 7; i++){
 18e:	21 96       	adiw	r28, 0x01	; 1
 190:	c8 30       	cpi	r28, 0x08	; 8
 192:	d1 05       	cpc	r29, r1
 194:	bc f3       	brlt	.-18     	; 0x184 <Load_Custom_Char+0x3e>
		for (int j = 0; j <= 7; j++){
			LCD_Char(Custorm_Chars5X8[i][j]);
		}
	}
	//LCD_Char(Custorm_Chars5X8[2][i]);
	LCD_Cmd(0x80); // Return to Home
 196:	80 e8       	ldi	r24, 0x80	; 128
 198:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
	/*Load custom char into the CGROM*/
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <LCD_String_xy>:

void LCD_String_xy (char row, char pos)/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
 1a6:	81 11       	cpse	r24, r1
 1a8:	08 c0       	rjmp	.+16     	; 0x1ba <LCD_String_xy+0x14>
 1aa:	60 31       	cpi	r22, 0x10	; 16
 1ac:	30 f4       	brcc	.+12     	; 0x1ba <LCD_String_xy+0x14>
	LCD_Cmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 1ae:	86 2f       	mov	r24, r22
 1b0:	8f 70       	andi	r24, 0x0F	; 15
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 1b8:	08 95       	ret
	else if (row == 1 && pos<16)
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	39 f4       	brne	.+14     	; 0x1cc <LCD_String_xy+0x26>
 1be:	60 31       	cpi	r22, 0x10	; 16
 1c0:	28 f4       	brcc	.+10     	; 0x1cc <LCD_String_xy+0x26>
	LCD_Cmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 1c2:	86 2f       	mov	r24, r22
 1c4:	8f 70       	andi	r24, 0x0F	; 15
 1c6:	80 6c       	ori	r24, 0xC0	; 192
 1c8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 1cc:	08 95       	ret

000001ce <main>:
}

int main(void)
{
	LCD_Init(); /* Initialize LCD */
 1ce:	0e 94 6d 00 	call	0xda	; 0xda <LCD_Init>
	Load_Custom_Char(); /* Load custom characters into CGRAM */
 1d2:	0e 94 a3 00 	call	0x146	; 0x146 <Load_Custom_Char>
	LCD_Clear(); /* Clear LCD */
 1d6:	0e 94 86 00 	call	0x10c	; 0x10c <LCD_Clear>
	LCD_String("Custom Chars");/* Display string on screen */
 1da:	80 e6       	ldi	r24, 0x60	; 96
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 8d 00 	call	0x11a	; 0x11a <LCD_String>
 1e2:	2f e3       	ldi	r18, 0x3F	; 63
 1e4:	8d e0       	ldi	r24, 0x0D	; 13
 1e6:	93 e0       	ldi	r25, 0x03	; 3
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x1a>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x24>
 1f2:	00 00       	nop
	_delay_ms(1000);
	LCD_String_xy(1,0); /* Place cursor on the second row */
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String_xy>
	LCD_Char(0x00); /* Display the character in address 0x00 of CGRAM*/
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	0e 94 57 00 	call	0xae	; 0xae <LCD_Char>
	LCD_String_xy(1,2); /* Place cursor on the second row */
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String_xy>
	LCD_Char(0x01); /* Display the character in address 0x00 of CGRAM*/
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 57 00 	call	0xae	; 0xae <LCD_Char>
	LCD_String_xy(1,4); /* Place cursor on the second row */
 210:	64 e0       	ldi	r22, 0x04	; 4
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String_xy>
	LCD_Char(0x02); /* Display the character in address 0x00 of CGRAM*/
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	0e 94 57 00 	call	0xae	; 0xae <LCD_Char>
	LCD_String_xy(1,5); /* Place cursor on the second row */
 21e:	65 e0       	ldi	r22, 0x05	; 5
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String_xy>
	LCD_Char(0x03); /* Display the character in address 0x00 of CGRAM*/
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	0e 94 57 00 	call	0xae	; 0xae <LCD_Char>
	LCD_String_xy(1,7); /* Place cursor on the second row */
 22c:	67 e0       	ldi	r22, 0x07	; 7
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String_xy>
	LCD_Char(0x04); /* Display the character in address 0x00 of CGRAM*/
 234:	84 e0       	ldi	r24, 0x04	; 4
 236:	0e 94 57 00 	call	0xae	; 0xae <LCD_Char>
	LCD_String_xy(1,9); /* Place cursor on the second row */
 23a:	69 e0       	ldi	r22, 0x09	; 9
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String_xy>
	LCD_Char(0x05); /* Display the character in address 0x00 of CGRAM*/
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	0e 94 57 00 	call	0xae	; 0xae <LCD_Char>
	LCD_String_xy(1,11); /* Place cursor on the second row */
 248:	6b e0       	ldi	r22, 0x0B	; 11
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String_xy>
	LCD_Char(0x06); /* Display the character in address 0x00 of CGRAM*/
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	0e 94 57 00 	call	0xae	; 0xae <LCD_Char>
	LCD_String_xy(1,13); /* Place cursor on the second row */
 256:	6d e0       	ldi	r22, 0x0D	; 13
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String_xy>
	LCD_Char(0x07); /* Display the character in address 0x00 of CGRAM*/
 25e:	87 e0       	ldi	r24, 0x07	; 7
 260:	0e 94 57 00 	call	0xae	; 0xae <LCD_Char>
 264:	2f eb       	ldi	r18, 0xBF	; 191
 266:	87 e2       	ldi	r24, 0x27	; 39
 268:	99 e0       	ldi	r25, 0x09	; 9
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0x9c>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0xa6>
 274:	00 00       	nop
	_delay_ms(3000);
	int shift,i;
	shift = 15;	/* Number of time shifts count=15 */
	for(i=0;i<shift;i++)
 276:	c0 e0       	ldi	r28, 0x00	; 0
 278:	d0 e0       	ldi	r29, 0x00	; 0
 27a:	0d c0       	rjmp	.+26     	; 0x296 <main+0xc8>
	{
		LCD_Cmd(0x18);/* shift entire display left */
 27c:	88 e1       	ldi	r24, 0x18	; 24
 27e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 282:	2f e5       	ldi	r18, 0x5F	; 95
 284:	8a ee       	ldi	r24, 0xEA	; 234
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <main+0xba>
 290:	00 c0       	rjmp	.+0      	; 0x292 <main+0xc4>
 292:	00 00       	nop
	LCD_String_xy(1,13); /* Place cursor on the second row */
	LCD_Char(0x07); /* Display the character in address 0x00 of CGRAM*/
	_delay_ms(3000);
	int shift,i;
	shift = 15;	/* Number of time shifts count=15 */
	for(i=0;i<shift;i++)
 294:	21 96       	adiw	r28, 0x01	; 1
 296:	cf 30       	cpi	r28, 0x0F	; 15
 298:	d1 05       	cpc	r29, r1
 29a:	84 f3       	brlt	.-32     	; 0x27c <main+0xae>
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	d0 e0       	ldi	r29, 0x00	; 0
 2a0:	0d c0       	rjmp	.+26     	; 0x2bc <main+0xee>
	}
	shift=30;/* number of time shifts 30 */
	
	for(i=0;i<30;i++)
	{
		LCD_Cmd(0x1c);/* shift entire display right */
 2a2:	8c e1       	ldi	r24, 0x1C	; 28
 2a4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Cmd>
 2a8:	2f e5       	ldi	r18, 0x5F	; 95
 2aa:	8a ee       	ldi	r24, 0xEA	; 234
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0xe0>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0xea>
 2b8:	00 00       	nop
		_delay_ms(300);
		
	}
	shift=30;/* number of time shifts 30 */
	
	for(i=0;i<30;i++)
 2ba:	21 96       	adiw	r28, 0x01	; 1
 2bc:	ce 31       	cpi	r28, 0x1E	; 30
 2be:	d1 05       	cpc	r29, r1
 2c0:	84 f3       	brlt	.-32     	; 0x2a2 <main+0xd4>
 2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <main+0xf4>

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
