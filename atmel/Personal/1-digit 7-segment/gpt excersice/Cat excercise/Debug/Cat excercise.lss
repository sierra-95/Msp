
Cat excercise.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000be  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000673  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005dc  00000000  00000000  00000843  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025d  00000000  00000000  00000e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000345  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000088  00000000  00000000  000013f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 48 00 	call	0x90	; 0x90 <main>
  7a:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <displayDigit>:
	0b01111111, // 8
	0b01101111  // 9
};

void displayDigit(uint8_t digit) {
	LED_Port = digits[digit]; // Display the given digit on the 7-segment display
  82:	e8 2f       	mov	r30, r24
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	e0 5a       	subi	r30, 0xA0	; 160
  88:	ff 4f       	sbci	r31, 0xFF	; 255
  8a:	80 81       	ld	r24, Z
  8c:	82 bb       	out	0x12, r24	; 18
  8e:	08 95       	ret

00000090 <main>:
}

int main(void) {
	LED_Dir = 0xFF; // Set all pins of PORTD as output
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	81 bb       	out	0x11, r24	; 17
	
	// No need to set up the RESET pin as it's a dedicated reset pin and doesn't need configuration

	uint8_t num = 9; // Start with digit 9
  94:	c9 e0       	ldi	r28, 0x09	; 9
  96:	01 c0       	rjmp	.+2      	; 0x9a <main+0xa>
		displayDigit(num);
		_delay_ms(1000); // Delay of 1000ms (1 second)
		
		// Decrement the digit, and if it reaches 0, reset to 9
		if (num == 0) {
			num = 9;
  98:	c9 e0       	ldi	r28, 0x09	; 9

	uint8_t num = 9; // Start with digit 9
	
	while (1) {
		// Display the current digit
		displayDigit(num);
  9a:	8c 2f       	mov	r24, r28
  9c:	0e 94 41 00 	call	0x82	; 0x82 <displayDigit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e3       	ldi	r18, 0x3F	; 63
  a2:	8d e0       	ldi	r24, 0x0D	; 13
  a4:	93 e0       	ldi	r25, 0x03	; 3
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x16>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x20>
  b0:	00 00       	nop
		_delay_ms(1000); // Delay of 1000ms (1 second)
		
		// Decrement the digit, and if it reaches 0, reset to 9
		if (num == 0) {
  b2:	cc 23       	and	r28, r28
  b4:	89 f3       	breq	.-30     	; 0x98 <main+0x8>
			num = 9;
			} 
			else {
			num--;
  b6:	c1 50       	subi	r28, 0x01	; 1
  b8:	f0 cf       	rjmp	.-32     	; 0x9a <main+0xa>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
