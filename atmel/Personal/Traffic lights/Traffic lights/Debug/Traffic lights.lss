
Traffic lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000661  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000570  00000000  00000000  00000819  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000289  00000000  00000000  00000d89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000312  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  0000134a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001422  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
    DDRB=0x49;
  6c:	89 e4       	ldi	r24, 0x49	; 73
  6e:	87 bb       	out	0x17, r24	; 23
    while (1) 
    {
		PORTB^=(1<<PB0); // x^=y means x= x^y
  70:	98 b3       	in	r25, 0x18	; 24
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	98 27       	eor	r25, r24
  76:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  78:	2f ef       	ldi	r18, 0xFF	; 255
  7a:	39 e6       	ldi	r19, 0x69	; 105
  7c:	98 e1       	ldi	r25, 0x18	; 24
  7e:	21 50       	subi	r18, 0x01	; 1
  80:	30 40       	sbci	r19, 0x00	; 0
  82:	90 40       	sbci	r25, 0x00	; 0
  84:	e1 f7       	brne	.-8      	; 0x7e <main+0x12>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x1c>
  88:	00 00       	nop
		result-ob 0000 0001
		*/
		_delay_ms(1000);
		//turn red light off
		//PORTB= 0b 0000 0000
		PORTB^=(1<<PB0);
  8a:	98 b3       	in	r25, 0x18	; 24
  8c:	89 27       	eor	r24, r25
  8e:	88 bb       	out	0x18, r24	; 24
		//turn orange on
		PORTB^=(1<<PB3); // mask value= 0b 0000 1000
  90:	98 b3       	in	r25, 0x18	; 24
  92:	88 e0       	ldi	r24, 0x08	; 8
  94:	98 27       	eor	r25, r24
  96:	98 bb       	out	0x18, r25	; 24
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	34 e3       	ldi	r19, 0x34	; 52
  9c:	9c e0       	ldi	r25, 0x0C	; 12
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	30 40       	sbci	r19, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <main+0x32>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <main+0x3c>
  a8:	00 00       	nop
		//PORTB= 0b 0000 1000
		_delay_ms(500);
		//turn orange off
		PORTB^=(1<<PB3);
  aa:	98 b3       	in	r25, 0x18	; 24
  ac:	89 27       	eor	r24, r25
  ae:	88 bb       	out	0x18, r24	; 24
		/* to turn off PORTB= ob 0000 1000
		also 1<<PB3 IS 0b 0000 1000 which is the mask
		XOR sets 0 if both bits are same and 1 if different
		result= ob 0000 0000
		*/
		PORTB^=(1<<PB6);
  b0:	98 b3       	in	r25, 0x18	; 24
  b2:	80 e4       	ldi	r24, 0x40	; 64
  b4:	98 27       	eor	r25, r24
  b6:	98 bb       	out	0x18, r25	; 24
  b8:	2f ef       	ldi	r18, 0xFF	; 255
  ba:	39 e6       	ldi	r19, 0x69	; 105
  bc:	98 e1       	ldi	r25, 0x18	; 24
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	30 40       	sbci	r19, 0x00	; 0
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x52>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x5c>
  c8:	00 00       	nop
		1<<PB6 is 0100 0000 
		result is 0b 0100 0000 hence PB6 sets high
		*/
		_delay_ms(1000);
		//green off
		PORTB^=(1<<PB6);	
  ca:	98 b3       	in	r25, 0x18	; 24
  cc:	89 27       	eor	r24, r25
  ce:	88 bb       	out	0x18, r24	; 24
  d0:	cf cf       	rjmp	.-98     	; 0x70 <main+0x4>

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
