
Adc conversion.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000196  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000196  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000216  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007bc  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000639  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  000010c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000141c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020c  00000000  00000000  0000182b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001a37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e9       	ldi	r30, 0x96	; 150
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  7a:	0c 94 c9 00 	jmp	0x192	; 0x192 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
void display_2(int digit); /*Function declaration*/
void display_3(int digit); /*Function declaration*/
char numbers[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x00};
/*Function declaration*/
void ADC_Init(){
	DDRA = 0x0; /* Make ADC port as input */
  82:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87; /* Enable ADC, fr/128 */
  84:	87 e8       	ldi	r24, 0x87	; 135
  86:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40; /* Vref: Avcc */
  88:	80 e4       	ldi	r24, 0x40	; 64
  8a:	87 b9       	out	0x07, r24	; 7
  8c:	08 95       	ret

0000008e <ADC_Read>:
}
int ADC_Read(int channel){
	int Ain,AinLow;
	ADMUX = ADMUX|(channel); /* Set input channel to read */
  8e:	97 b1       	in	r25, 0x07	; 7
  90:	89 2b       	or	r24, r25
  92:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC); /* Start conversion */
  94:	86 b1       	in	r24, 0x06	; 6
  96:	80 64       	ori	r24, 0x40	; 64
  98:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA & (1<<ADIF)) == 0);/* Monitor end of conversion interrupt */
  9a:	34 9b       	sbis	0x06, 4	; 6
  9c:	fe cf       	rjmp	.-4      	; 0x9a <ADC_Read+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8a e1       	ldi	r24, 0x1A	; 26
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <ADC_Read+0x12>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <ADC_Read+0x18>
	_delay_us(10);
	AinLow = (int)ADCL; /* Read lower byte*/
  a6:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256; /* Read higher 2 bits and Multiply with weight */
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	98 2f       	mov	r25, r24
  ae:	88 27       	eor	r24, r24
	Ain = Ain + AinLow;
	return(Ain); /* Return digital value*/
}
  b0:	82 0f       	add	r24, r18
  b2:	91 1d       	adc	r25, r1
  b4:	08 95       	ret

000000b6 <DISPLAY_Init>:
	return 0;
}
/*Function declaration*/
void DISPLAY_Init(){
	/*initialization*/
	SEG1_Dir |= 0xff;
  b6:	87 b3       	in	r24, 0x17	; 23
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	87 bb       	out	0x17, r24	; 23
	SEG1_Port = 0xff;
  bc:	88 bb       	out	0x18, r24	; 24
	SEG2_Dir |= 0xff;
  be:	94 b3       	in	r25, 0x14	; 20
  c0:	84 bb       	out	0x14, r24	; 20
	SEG2_Port = 0xff;
  c2:	85 bb       	out	0x15, r24	; 21
	SEG3_Dir |= 0xff;
  c4:	91 b3       	in	r25, 0x11	; 17
  c6:	81 bb       	out	0x11, r24	; 17
	SEG3_Port = 0xff;
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	08 95       	ret

000000cc <display_1>:
}
void display_1(int digit){
	SEG1_Port = numbers[digit];
  cc:	80 5a       	subi	r24, 0xA0	; 160
  ce:	9f 4f       	sbci	r25, 0xFF	; 255
  d0:	fc 01       	movw	r30, r24
  d2:	80 81       	ld	r24, Z
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	08 95       	ret

000000d8 <display_2>:
}
void display_2(int digit){
	SEG2_Port = numbers[digit];
  d8:	80 5a       	subi	r24, 0xA0	; 160
  da:	9f 4f       	sbci	r25, 0xFF	; 255
  dc:	fc 01       	movw	r30, r24
  de:	80 81       	ld	r24, Z
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	08 95       	ret

000000e4 <display_3>:
}
void display_3(int digit){
	SEG3_Port = numbers[digit];
  e4:	80 5a       	subi	r24, 0xA0	; 160
  e6:	9f 4f       	sbci	r25, 0xFF	; 255
  e8:	fc 01       	movw	r30, r24
  ea:	80 81       	ld	r24, Z
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	08 95       	ret

000000f0 <main>:
	return(Ain); /* Return digital value*/
}
int main(){
	int value;
	int hunds, tens, ones;
	ADC_Init();
  f0:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	DISPLAY_Init();
  f4:	0e 94 5b 00 	call	0xb6	; 0xb6 <DISPLAY_Init>
	while(1)
	{
		value = ADC_Read(0); /* Read ADC channel 0 */
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	0e 94 47 00 	call	0x8e	; 0x8e <ADC_Read>
 100:	fc 01       	movw	r30, r24
		value = value/10;
 102:	2a e0       	ldi	r18, 0x0A	; 10
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	0e 94 a1 00 	call	0x142	; 0x142 <__divmodhi4>
 10c:	eb 01       	movw	r28, r22
		hunds = value/100;
 10e:	cf 01       	movw	r24, r30
 110:	68 ee       	ldi	r22, 0xE8	; 232
 112:	73 e0       	ldi	r23, 0x03	; 3
 114:	0e 94 a1 00 	call	0x142	; 0x142 <__divmodhi4>
 118:	fb 01       	movw	r30, r22
		value %= 100;
 11a:	ce 01       	movw	r24, r28
 11c:	64 e6       	ldi	r22, 0x64	; 100
 11e:	70 e0       	ldi	r23, 0x00	; 0
 120:	0e 94 a1 00 	call	0x142	; 0x142 <__divmodhi4>
		tens = value/10;
 124:	b9 01       	movw	r22, r18
 126:	0e 94 a1 00 	call	0x142	; 0x142 <__divmodhi4>
 12a:	8b 01       	movw	r16, r22
 12c:	ec 01       	movw	r28, r24
		ones = value%10;
		display_1(hunds);
 12e:	cf 01       	movw	r24, r30
 130:	0e 94 66 00 	call	0xcc	; 0xcc <display_1>
		display_2(tens);
 134:	c8 01       	movw	r24, r16
 136:	0e 94 6c 00 	call	0xd8	; 0xd8 <display_2>
		display_3(ones);
 13a:	ce 01       	movw	r24, r28
 13c:	0e 94 72 00 	call	0xe4	; 0xe4 <display_3>
 140:	db cf       	rjmp	.-74     	; 0xf8 <main+0x8>

00000142 <__divmodhi4>:
 142:	97 fb       	bst	r25, 7
 144:	07 2e       	mov	r0, r23
 146:	16 f4       	brtc	.+4      	; 0x14c <__divmodhi4+0xa>
 148:	00 94       	com	r0
 14a:	07 d0       	rcall	.+14     	; 0x15a <__divmodhi4_neg1>
 14c:	77 fd       	sbrc	r23, 7
 14e:	09 d0       	rcall	.+18     	; 0x162 <__divmodhi4_neg2>
 150:	0e 94 b5 00 	call	0x16a	; 0x16a <__udivmodhi4>
 154:	07 fc       	sbrc	r0, 7
 156:	05 d0       	rcall	.+10     	; 0x162 <__divmodhi4_neg2>
 158:	3e f4       	brtc	.+14     	; 0x168 <__divmodhi4_exit>

0000015a <__divmodhi4_neg1>:
 15a:	90 95       	com	r25
 15c:	81 95       	neg	r24
 15e:	9f 4f       	sbci	r25, 0xFF	; 255
 160:	08 95       	ret

00000162 <__divmodhi4_neg2>:
 162:	70 95       	com	r23
 164:	61 95       	neg	r22
 166:	7f 4f       	sbci	r23, 0xFF	; 255

00000168 <__divmodhi4_exit>:
 168:	08 95       	ret

0000016a <__udivmodhi4>:
 16a:	aa 1b       	sub	r26, r26
 16c:	bb 1b       	sub	r27, r27
 16e:	51 e1       	ldi	r21, 0x11	; 17
 170:	07 c0       	rjmp	.+14     	; 0x180 <__udivmodhi4_ep>

00000172 <__udivmodhi4_loop>:
 172:	aa 1f       	adc	r26, r26
 174:	bb 1f       	adc	r27, r27
 176:	a6 17       	cp	r26, r22
 178:	b7 07       	cpc	r27, r23
 17a:	10 f0       	brcs	.+4      	; 0x180 <__udivmodhi4_ep>
 17c:	a6 1b       	sub	r26, r22
 17e:	b7 0b       	sbc	r27, r23

00000180 <__udivmodhi4_ep>:
 180:	88 1f       	adc	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	5a 95       	dec	r21
 186:	a9 f7       	brne	.-22     	; 0x172 <__udivmodhi4_loop>
 188:	80 95       	com	r24
 18a:	90 95       	com	r25
 18c:	bc 01       	movw	r22, r24
 18e:	cd 01       	movw	r24, r26
 190:	08 95       	ret

00000192 <_exit>:
 192:	f8 94       	cli

00000194 <__stop_program>:
 194:	ff cf       	rjmp	.-2      	; 0x194 <__stop_program>
