
Ex 3 2-digit 7-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000002ee  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009cf  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007f2  00000000  00000000  00000e23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d4  00000000  00000000  00001615  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  000019ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047a  00000000  00000000  00001ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000232  00000000  00000000  00001f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002180  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  9e:	0c 94 75 01 	jmp	0x2ea	; 0x2ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <vision_persist>:
int i = 0;
int j = 0;

/* A function to act as a persistence of vision delay */
void vision_persist() {
	int delay = delayvalue;
  a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	while (0 < delay) {
  ae:	05 c0       	rjmp	.+10     	; 0xba <vision_persist+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	25 e0       	ldi	r18, 0x05	; 5
  b2:	2a 95       	dec	r18
  b4:	f1 f7       	brne	.-4      	; 0xb2 <vision_persist+0xc>
  b6:	00 00       	nop
		_delay_us(1);
		--delay;
  b8:	01 97       	sbiw	r24, 0x01	; 1
int j = 0;

/* A function to act as a persistence of vision delay */
void vision_persist() {
	int delay = delayvalue;
	while (0 < delay) {
  ba:	18 16       	cp	r1, r24
  bc:	19 06       	cpc	r1, r25
  be:	c4 f3       	brlt	.-16     	; 0xb0 <vision_persist+0xa>
		_delay_us(1);
		--delay;
	}
}
  c0:	08 95       	ret

000000c2 <sevseg_refreshDisplay>:

/* A function to reload the timer initial value after the timer overflows */
void sevseg_refreshDisplay() {
	TCNT1 = 34286; // Set TCNT1 to count for 30ms
  c2:	8e ee       	ldi	r24, 0xEE	; 238
  c4:	95 e8       	ldi	r25, 0x85	; 133
  c6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
  ca:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR1B |= (1 << CS11); // Start timer1 with 8 prescaler
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <displayLED>:
}

void displayLED(int input) { /* Function to display a number on the LED */
	char BH = (~PORTB & 0xF0);
  da:	25 b1       	in	r18, 0x05	; 5
  dc:	20 95       	com	r18
  de:	20 7f       	andi	r18, 0xF0	; 240
	char BL = (display[input] & 0x0F);
  e0:	fc 01       	movw	r30, r24
  e2:	ea 5f       	subi	r30, 0xFA	; 250
  e4:	fe 4f       	sbci	r31, 0xFE	; 254
  e6:	90 81       	ld	r25, Z
  e8:	9f 70       	andi	r25, 0x0F	; 15
	PORTB = ~(BH | BL);
  ea:	92 2b       	or	r25, r18
  ec:	90 95       	com	r25
  ee:	95 b9       	out	0x05, r25	; 5

	char DL = (~PORTD & 0x0F);
  f0:	8b b1       	in	r24, 0x0b	; 11
  f2:	80 95       	com	r24
  f4:	8f 70       	andi	r24, 0x0F	; 15
	char DH = (display[input] & 0xF0);
  f6:	90 81       	ld	r25, Z
  f8:	90 7f       	andi	r25, 0xF0	; 240
	PORTD = ~(DH | DL);
  fa:	89 2b       	or	r24, r25
  fc:	80 95       	com	r24
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	08 95       	ret

00000102 <__vector_13>:
}

ISR(TIMER1_OVF_vect) { /* Interrupt Service Routine for Timer1 */
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	ef 93       	push	r30
 12e:	ff 93       	push	r31
	PORTB ^= (1 << SEG1); // Toggle SEG1
 130:	25 b1       	in	r18, 0x05	; 5
 132:	0f 2e       	mov	r0, r31
 134:	f4 e0       	ldi	r31, 0x04	; 4
 136:	ef 2e       	mov	r14, r31
 138:	f1 e0       	ldi	r31, 0x01	; 1
 13a:	ff 2e       	mov	r15, r31
 13c:	f0 2d       	mov	r31, r0
 13e:	c1 e0       	ldi	r28, 0x01	; 1
 140:	d0 e0       	ldi	r29, 0x00	; 0
 142:	ce 01       	movw	r24, r28
 144:	f7 01       	movw	r30, r14
 146:	00 80       	ld	r0, Z
 148:	02 c0       	rjmp	.+4      	; 0x14e <__vector_13+0x4c>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <__vector_13+0x48>
 152:	82 27       	eor	r24, r18
 154:	85 b9       	out	0x05, r24	; 5
	PORTB ^= (1 << SEG2); // Toggle SEG2
 156:	25 b1       	in	r18, 0x05	; 5
 158:	02 e0       	ldi	r16, 0x02	; 2
 15a:	11 e0       	ldi	r17, 0x01	; 1
 15c:	ce 01       	movw	r24, r28
 15e:	f8 01       	movw	r30, r16
 160:	00 80       	ld	r0, Z
 162:	02 c0       	rjmp	.+4      	; 0x168 <__vector_13+0x66>
 164:	88 0f       	add	r24, r24
 166:	99 1f       	adc	r25, r25
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <__vector_13+0x62>
 16c:	82 27       	eor	r24, r18
 16e:	85 b9       	out	0x05, r24	; 5
	displayLED(i);
 170:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
 174:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <i+0x1>
 178:	0e 94 6d 00 	call	0xda	; 0xda <displayLED>
	vision_persist();
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <vision_persist>

	PORTB ^= (1 << SEG1); // Toggle SEG1
 180:	25 b1       	in	r18, 0x05	; 5
 182:	ce 01       	movw	r24, r28
 184:	f7 01       	movw	r30, r14
 186:	00 80       	ld	r0, Z
 188:	02 c0       	rjmp	.+4      	; 0x18e <__vector_13+0x8c>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <__vector_13+0x88>
 192:	82 27       	eor	r24, r18
 194:	85 b9       	out	0x05, r24	; 5
	PORTB ^= (1 << SEG2); // Toggle SEG2
 196:	85 b1       	in	r24, 0x05	; 5
 198:	f8 01       	movw	r30, r16
 19a:	00 80       	ld	r0, Z
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <__vector_13+0xa0>
 19e:	cc 0f       	add	r28, r28
 1a0:	dd 1f       	adc	r29, r29
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <__vector_13+0x9c>
 1a6:	c8 27       	eor	r28, r24
 1a8:	c5 b9       	out	0x05, r28	; 5
	displayLED(j);
 1aa:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1ae:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1b2:	0e 94 6d 00 	call	0xda	; 0xda <displayLED>
	vision_persist();
 1b6:	0e 94 53 00 	call	0xa6	; 0xa6 <vision_persist>

	sevseg_refreshDisplay();
 1ba:	0e 94 61 00 	call	0xc2	; 0xc2 <sevseg_refreshDisplay>
}
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	df 91       	pop	r29
 1c4:	cf 91       	pop	r28
 1c6:	bf 91       	pop	r27
 1c8:	af 91       	pop	r26
 1ca:	9f 91       	pop	r25
 1cc:	8f 91       	pop	r24
 1ce:	7f 91       	pop	r23
 1d0:	6f 91       	pop	r22
 1d2:	5f 91       	pop	r21
 1d4:	4f 91       	pop	r20
 1d6:	3f 91       	pop	r19
 1d8:	2f 91       	pop	r18
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	ff 90       	pop	r15
 1e0:	ef 90       	pop	r14
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <InitADC>:

void InitADC() {
	// Select AVcc as the reference voltage
	ADMUX |= (1 << REFS0);
 1ec:	ec e7       	ldi	r30, 0x7C	; 124
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	80 83       	st	Z, r24
	// Set prescaler to 128 and enable ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0) | (1 << ADEN);
 1f6:	ea e7       	ldi	r30, 0x7A	; 122
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	80 81       	ld	r24, Z
 1fc:	87 68       	ori	r24, 0x87	; 135
 1fe:	80 83       	st	Z, r24
 200:	08 95       	ret

00000202 <ReadADC>:
}

uint16_t ReadADC(uint8_t ADCchannel) {
	// Select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 202:	ec e7       	ldi	r30, 0x7C	; 124
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	90 81       	ld	r25, Z
 208:	90 7f       	andi	r25, 0xF0	; 240
 20a:	8f 70       	andi	r24, 0x0F	; 15
 20c:	89 2b       	or	r24, r25
 20e:	80 83       	st	Z, r24
	// Start single conversion
	ADCSRA |= (1 << ADSC);
 210:	ea e7       	ldi	r30, 0x7A	; 122
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 64       	ori	r24, 0x40	; 64
 218:	80 83       	st	Z, r24
	// Wait until ADC conversion is complete
	while (ADCSRA & (1 << ADSC))
 21a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 21e:	86 fd       	sbrc	r24, 6
 220:	fc cf       	rjmp	.-8      	; 0x21a <ReadADC+0x18>
		;
	return ADC;
 222:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 226:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 22a:	08 95       	ret

0000022c <main>:

int main(void) {
	// Initialize ADC
	InitADC();
 22c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <InitADC>
	DDRB |= 0xFF;
 230:	84 b1       	in	r24, 0x04	; 4
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0xFF;
 236:	9a b1       	in	r25, 0x0a	; 10
 238:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x00;
 23a:	17 b8       	out	0x07, r1	; 7
	PORTB |= (1 << SEG1);
 23c:	25 b1       	in	r18, 0x05	; 5
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	00 90 04 01 	lds	r0, 0x0104	; 0x800104 <SEG1>
 246:	02 c0       	rjmp	.+4      	; 0x24c <main+0x20>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <main+0x1c>
 250:	82 2b       	or	r24, r18
 252:	85 b9       	out	0x05, r24	; 5
	

	/* Interrupt Setup */
	sevseg_refreshDisplay();
 254:	0e 94 61 00 	call	0xc2	; 0xc2 <sevseg_refreshDisplay>
	TIMSK1 |= (1 << TOIE1); // Enable Timer1 overflow interrupts
 258:	ef e6       	ldi	r30, 0x6F	; 111
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	81 60       	ori	r24, 0x01	; 1
 260:	80 83       	st	Z, r24
	sei(); // Enable global interrupt
 262:	78 94       	sei

	while (1) {
		// Read analog value from potentiometer connected to ADC channel 0
		uint16_t rawValue = ReadADC(0);
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 01 01 	call	0x202	; 0x202 <ReadADC>

		// Calculate the range of the potentiometer
		uint16_t valRange = maxVal - minVal;

		// Map the adjusted value to the range of 0 to 99
		uint8_t mappedValue = (adjustedValue * 99) / valRange;
 26a:	23 e6       	ldi	r18, 0x63	; 99
 26c:	ac 01       	movw	r20, r24
 26e:	24 9f       	mul	r18, r20
 270:	c0 01       	movw	r24, r0
 272:	25 9f       	mul	r18, r21
 274:	90 0d       	add	r25, r0
 276:	11 24       	eor	r1, r1
 278:	6d e8       	ldi	r22, 0x8D	; 141
 27a:	72 e0       	ldi	r23, 0x02	; 2
 27c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <__udivmodhi4>
		uint8_t digit1 = mappedValue / 10;
 280:	8d ec       	ldi	r24, 0xCD	; 205
 282:	68 9f       	mul	r22, r24
 284:	81 2d       	mov	r24, r1
 286:	11 24       	eor	r1, r1
 288:	86 95       	lsr	r24
 28a:	86 95       	lsr	r24
 28c:	86 95       	lsr	r24
		uint8_t digit2 = mappedValue % 10;
 28e:	28 2f       	mov	r18, r24
 290:	22 0f       	add	r18, r18
 292:	92 2f       	mov	r25, r18
 294:	99 0f       	add	r25, r25
 296:	99 0f       	add	r25, r25
 298:	92 0f       	add	r25, r18
 29a:	26 2f       	mov	r18, r22
 29c:	29 1b       	sub	r18, r25
		i = digit1;
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <i+0x1>
 2a4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i>
		j = digit2;
 2a8:	82 2f       	mov	r24, r18
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 2b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b4:	8f e3       	ldi	r24, 0x3F	; 63
 2b6:	9c e9       	ldi	r25, 0x9C	; 156
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <main+0x8c>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x92>
 2be:	00 00       	nop
 2c0:	d1 cf       	rjmp	.-94     	; 0x264 <main+0x38>

000002c2 <__udivmodhi4>:
 2c2:	aa 1b       	sub	r26, r26
 2c4:	bb 1b       	sub	r27, r27
 2c6:	51 e1       	ldi	r21, 0x11	; 17
 2c8:	07 c0       	rjmp	.+14     	; 0x2d8 <__udivmodhi4_ep>

000002ca <__udivmodhi4_loop>:
 2ca:	aa 1f       	adc	r26, r26
 2cc:	bb 1f       	adc	r27, r27
 2ce:	a6 17       	cp	r26, r22
 2d0:	b7 07       	cpc	r27, r23
 2d2:	10 f0       	brcs	.+4      	; 0x2d8 <__udivmodhi4_ep>
 2d4:	a6 1b       	sub	r26, r22
 2d6:	b7 0b       	sbc	r27, r23

000002d8 <__udivmodhi4_ep>:
 2d8:	88 1f       	adc	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	5a 95       	dec	r21
 2de:	a9 f7       	brne	.-22     	; 0x2ca <__udivmodhi4_loop>
 2e0:	80 95       	com	r24
 2e2:	90 95       	com	r25
 2e4:	bc 01       	movw	r22, r24
 2e6:	cd 01       	movw	r24, r26
 2e8:	08 95       	ret

000002ea <_exit>:
 2ea:	f8 94       	cli

000002ec <__stop_program>:
 2ec:	ff cf       	rjmp	.-2      	; 0x2ec <__stop_program>
