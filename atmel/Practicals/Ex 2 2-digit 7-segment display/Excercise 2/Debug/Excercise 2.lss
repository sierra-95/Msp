
Excercise 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000264  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800110  00800110  00000308  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008fd  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000796  00000000  00000000  00000cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000368  00000000  00000000  0000144b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  000017b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000411  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e3  00000000  00000000  00001c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001e70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e6       	ldi	r30, 0x64	; 100
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  9e:	0c 94 30 01 	jmp	0x260	; 0x260 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <vision_persist>:
int delayvalue = 5000;
int i = 0;
int j = 0;
/*A function to act as a persistence of vision delay*/
void vision_persist(){
	int delay = delayvalue;
  a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  aa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	while (0 < delay){
  ae:	05 c0       	rjmp	.+10     	; 0xba <vision_persist+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b0:	25 e0       	ldi	r18, 0x05	; 5
  b2:	2a 95       	dec	r18
  b4:	f1 f7       	brne	.-4      	; 0xb2 <vision_persist+0xc>
  b6:	00 00       	nop
		_delay_us(1);
		--delay;
  b8:	01 97       	sbiw	r24, 0x01	; 1
int i = 0;
int j = 0;
/*A function to act as a persistence of vision delay*/
void vision_persist(){
	int delay = delayvalue;
	while (0 < delay){
  ba:	18 16       	cp	r1, r24
  bc:	19 06       	cpc	r1, r25
  be:	c4 f3       	brlt	.-16     	; 0xb0 <vision_persist+0xa>
		_delay_us(1);
		--delay;
	}
}
  c0:	08 95       	ret

000000c2 <sevseg_refreshDisplay>:
/* A function to reload the timer initial value after the timer overflows */
void sevseg_refreshDisplay(){
	TCNT1L = 0x15; /* Load TCNT1, count for 30ms*/
  c2:	85 e1       	ldi	r24, 0x15	; 21
  c4:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCNT1H = 0x9F;
  c8:	8f e9       	ldi	r24, 0x9F	; 159
  ca:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	TCCR1B |= (1<<CS11); /* Start timer1 with 8 pre-scaler*/
  ce:	e1 e8       	ldi	r30, 0x81	; 129
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
	TIMSK1 |= (1<<TOIE1); /* Enable Timer1 overflow interrupts */
  d8:	ef e6       	ldi	r30, 0x6F	; 111
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	81 60       	ori	r24, 0x01	; 1
  e0:	80 83       	st	Z, r24
  e2:	08 95       	ret

000000e4 <displayLED>:
}
void displayLED(int input){ /*Function to display a number in the LED*/
	char BH = (~PORTB & 0xF0);
  e4:	25 b1       	in	r18, 0x05	; 5
  e6:	20 95       	com	r18
  e8:	20 7f       	andi	r18, 0xF0	; 240
	char BL = (display[input] & 0x0F);
  ea:	fc 01       	movw	r30, r24
  ec:	ea 5f       	subi	r30, 0xFA	; 250
  ee:	fe 4f       	sbci	r31, 0xFE	; 254
  f0:	90 81       	ld	r25, Z
  f2:	9f 70       	andi	r25, 0x0F	; 15
	PORTB = ~(BH|BL);
  f4:	92 2b       	or	r25, r18
  f6:	90 95       	com	r25
  f8:	95 b9       	out	0x05, r25	; 5
	char DL = (~PORTD & 0x0F);
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	80 95       	com	r24
  fe:	8f 70       	andi	r24, 0x0F	; 15
	char DH = (display[input] & 0xF0);
 100:	90 81       	ld	r25, Z
 102:	90 7f       	andi	r25, 0xF0	; 240
	PORTD = ~(DH|DL);
 104:	89 2b       	or	r24, r25
 106:	80 95       	com	r24
 108:	8b b9       	out	0x0b, r24	; 11
 10a:	08 95       	ret

0000010c <__vector_13>:
}
ISR(TIMER1_OVF_vect){ /*Interrupt Service Routine for Timer1*/
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	ef 92       	push	r14
 118:	ff 92       	push	r15
 11a:	0f 93       	push	r16
 11c:	1f 93       	push	r17
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	4f 93       	push	r20
 124:	5f 93       	push	r21
 126:	6f 93       	push	r22
 128:	7f 93       	push	r23
 12a:	8f 93       	push	r24
 12c:	9f 93       	push	r25
 12e:	af 93       	push	r26
 130:	bf 93       	push	r27
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	ef 93       	push	r30
 138:	ff 93       	push	r31
	PORTB ^= (1<<SEG1); /* Toggle SEG1 */
 13a:	25 b1       	in	r18, 0x05	; 5
 13c:	0f 2e       	mov	r0, r31
 13e:	f4 e0       	ldi	r31, 0x04	; 4
 140:	ef 2e       	mov	r14, r31
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	ff 2e       	mov	r15, r31
 146:	f0 2d       	mov	r31, r0
 148:	c1 e0       	ldi	r28, 0x01	; 1
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	ce 01       	movw	r24, r28
 14e:	f7 01       	movw	r30, r14
 150:	00 80       	ld	r0, Z
 152:	02 c0       	rjmp	.+4      	; 0x158 <__vector_13+0x4c>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <__vector_13+0x48>
 15c:	82 27       	eor	r24, r18
 15e:	85 b9       	out	0x05, r24	; 5
	PORTB ^= (1<<SEG2); /* Toggle SEG2 */
 160:	25 b1       	in	r18, 0x05	; 5
 162:	02 e0       	ldi	r16, 0x02	; 2
 164:	11 e0       	ldi	r17, 0x01	; 1
 166:	ce 01       	movw	r24, r28
 168:	f8 01       	movw	r30, r16
 16a:	00 80       	ld	r0, Z
 16c:	02 c0       	rjmp	.+4      	; 0x172 <__vector_13+0x66>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <__vector_13+0x62>
 176:	82 27       	eor	r24, r18
 178:	85 b9       	out	0x05, r24	; 5
	displayLED(i);
 17a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <i>
 17e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <i+0x1>
 182:	0e 94 72 00 	call	0xe4	; 0xe4 <displayLED>
	vision_persist();
 186:	0e 94 53 00 	call	0xa6	; 0xa6 <vision_persist>
	PORTB ^= (1<<SEG1); /* Toggle SEG1 */
 18a:	25 b1       	in	r18, 0x05	; 5
 18c:	ce 01       	movw	r24, r28
 18e:	f7 01       	movw	r30, r14
 190:	00 80       	ld	r0, Z
 192:	02 c0       	rjmp	.+4      	; 0x198 <__vector_13+0x8c>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <__vector_13+0x88>
 19c:	82 27       	eor	r24, r18
 19e:	85 b9       	out	0x05, r24	; 5
	PORTB ^= (1<<SEG2); /* Toggle SEG2 */
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	f8 01       	movw	r30, r16
 1a4:	00 80       	ld	r0, Z
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__vector_13+0xa0>
 1a8:	cc 0f       	add	r28, r28
 1aa:	dd 1f       	adc	r29, r29
 1ac:	0a 94       	dec	r0
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <__vector_13+0x9c>
 1b0:	c8 27       	eor	r28, r24
 1b2:	c5 b9       	out	0x05, r28	; 5
	displayLED(j);
 1b4:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 1b8:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1bc:	0e 94 72 00 	call	0xe4	; 0xe4 <displayLED>
	vision_persist();
 1c0:	0e 94 53 00 	call	0xa6	; 0xa6 <vision_persist>
	sevseg_refreshDisplay();
 1c4:	0e 94 61 00 	call	0xc2	; 0xc2 <sevseg_refreshDisplay>
}
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	3f 91       	pop	r19
 1e2:	2f 91       	pop	r18
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <main>:
int main(void){
	int count = 0;
	DDRB |= 0xFF;
 1f6:	84 b1       	in	r24, 0x04	; 4
 1f8:	8f ef       	ldi	r24, 0xFF	; 255
 1fa:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0xFF;
 1fc:	9a b1       	in	r25, 0x0a	; 10
 1fe:	8a b9       	out	0x0a, r24	; 10
	PORTB |= (1<<SEG1);
 200:	25 b1       	in	r18, 0x05	; 5
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	00 90 04 01 	lds	r0, 0x0104	; 0x800104 <SEG1>
 20a:	02 c0       	rjmp	.+4      	; 0x210 <main+0x1a>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	0a 94       	dec	r0
 212:	e2 f7       	brpl	.-8      	; 0x20c <main+0x16>
 214:	82 2b       	or	r24, r18
 216:	85 b9       	out	0x05, r24	; 5
	/***********************************************************************/
	/*Interrupt Setup*/
	sevseg_refreshDisplay();
 218:	0e 94 61 00 	call	0xc2	; 0xc2 <sevseg_refreshDisplay>
	sei(); /* Enable Global Interrupt */
 21c:	78 94       	sei
	displayLED(j);
	vision_persist();
	sevseg_refreshDisplay();
}
int main(void){
	int count = 0;
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
	/*Interrupt Setup*/
	sevseg_refreshDisplay();
	sei(); /* Enable Global Interrupt */
	/***********************************************************************/
	while (1) { /*Change this code segment to achieve a 10s countdown*/
		if(count < 10){
 222:	8a 30       	cpi	r24, 0x0A	; 10
 224:	91 05       	cpc	r25, r1
 226:	6c f4       	brge	.+26     	; 0x242 <main+0x4c>
			i = count;
 228:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <i+0x1>
 22c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <i>
			j = 9-count;
 230:	29 e0       	ldi	r18, 0x09	; 9
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	28 1b       	sub	r18, r24
 236:	39 0b       	sbc	r19, r25
 238:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
 23c:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
			count++;
 240:	01 96       	adiw	r24, 0x01	; 1
		}
		if(count == 10){
 242:	8a 30       	cpi	r24, 0x0A	; 10
 244:	91 05       	cpc	r25, r1
 246:	11 f4       	brne	.+4      	; 0x24c <main+0x56>
			count = 0;
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	39 e6       	ldi	r19, 0x69	; 105
 250:	48 e1       	ldi	r20, 0x18	; 24
 252:	21 50       	subi	r18, 0x01	; 1
 254:	30 40       	sbci	r19, 0x00	; 0
 256:	40 40       	sbci	r20, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0x5c>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x66>
 25c:	00 00       	nop
 25e:	e1 cf       	rjmp	.-62     	; 0x222 <main+0x2c>

00000260 <_exit>:
 260:	f8 94       	cli

00000262 <__stop_program>:
 262:	ff cf       	rjmp	.-2      	; 0x262 <__stop_program>
