
2 digit 7 segment circuit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000012c  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007db  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f2  00000000  00000000  00000a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002af  00000000  00000000  00001115  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c8  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ce  00000000  00000000  000017c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e2       	ldi	r30, 0x2C	; 44
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  8e:	0c 94 94 00 	jmp	0x128	; 0x128 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <displayLED>:
#include <util/delay.h>
char display[] = {0x3F ,0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x67};
int SEG1 = 4;
int SEG2 = 5;
void displayLED(int input){
	char BH = (~PORTB & 0xF0);
  96:	25 b1       	in	r18, 0x05	; 5
  98:	20 95       	com	r18
  9a:	20 7f       	andi	r18, 0xF0	; 240
	char BL = (display[input] & 0x0F);
  9c:	fc 01       	movw	r30, r24
  9e:	ec 5f       	subi	r30, 0xFC	; 252
  a0:	fe 4f       	sbci	r31, 0xFE	; 254
  a2:	90 81       	ld	r25, Z
  a4:	9f 70       	andi	r25, 0x0F	; 15
	PORTB = ~(BH|BL);
  a6:	92 2b       	or	r25, r18
  a8:	90 95       	com	r25
  aa:	95 b9       	out	0x05, r25	; 5
	char DL = (~PORTD & 0x0F);
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	80 95       	com	r24
  b0:	8f 70       	andi	r24, 0x0F	; 15
	char DH = (display[input] & 0xF0);
  b2:	90 81       	ld	r25, Z
  b4:	90 7f       	andi	r25, 0xF0	; 240
	PORTD = ~(DH|DL);
  b6:	89 2b       	or	r24, r25
  b8:	80 95       	com	r24
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	08 95       	ret

000000be <main>:
}
int main(void){
	DDRB |= 0xFF;
  be:	84 b1       	in	r24, 0x04	; 4
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	84 b9       	out	0x04, r24	; 4
	DDRD |= 0xFF;
  c4:	9a b1       	in	r25, 0x0a	; 10
  c6:	8a b9       	out	0x0a, r24	; 10
	int count = 0;
  c8:	c0 e0       	ldi	r28, 0x00	; 0
  ca:	d0 e0       	ldi	r29, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <main+0x14>
			displayLED(count);
			count++;
			_delay_ms(100);
		}
		if(count == 10){
			count = 0;
  ce:	c0 e0       	ldi	r28, 0x00	; 0
  d0:	d0 e0       	ldi	r29, 0x00	; 0
	DDRB |= 0xFF;
	DDRD |= 0xFF;
	int count = 0;

	while (1) {
		PORTB |= (1<<SEG1);
  d2:	45 b1       	in	r20, 0x05	; 5
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	9c 01       	movw	r18, r24
  da:	00 90 02 01 	lds	r0, 0x0102	; 0x800102 <SEG1>
  de:	02 c0       	rjmp	.+4      	; 0xe4 <main+0x26>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	0a 94       	dec	r0
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <main+0x22>
  e8:	24 2b       	or	r18, r20
  ea:	25 b9       	out	0x05, r18	; 5
		PORTB |= (1<<SEG2);
  ec:	25 b1       	in	r18, 0x05	; 5
  ee:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <main+0x3a>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <main+0x36>
  fc:	82 2b       	or	r24, r18
  fe:	85 b9       	out	0x05, r24	; 5
		if(count < 10){
 100:	ca 30       	cpi	r28, 0x0A	; 10
 102:	d1 05       	cpc	r29, r1
 104:	6c f4       	brge	.+26     	; 0x120 <main+0x62>
			displayLED(count);
 106:	ce 01       	movw	r24, r28
 108:	0e 94 4b 00 	call	0x96	; 0x96 <displayLED>
			count++;
 10c:	21 96       	adiw	r28, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	81 ee       	ldi	r24, 0xE1	; 225
 112:	94 e0       	ldi	r25, 0x04	; 4
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x56>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x60>
 11e:	00 00       	nop
			_delay_ms(100);
		}
		if(count == 10){
 120:	ca 30       	cpi	r28, 0x0A	; 10
 122:	d1 05       	cpc	r29, r1
 124:	b1 f6       	brne	.-84     	; 0xd2 <main+0x14>
 126:	d3 cf       	rjmp	.-90     	; 0xce <main+0x10>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
