
password assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000002f4  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a8  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000060a  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ab  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000156c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000366  00000000  00000000  00001955  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  7a:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <initialize>:
#define PASSWORD {1, 2, 3, 4}

// Function to initialize ports and pins
void initialize() {
	// Set PC0, PC1, PC2, and PC3 as output pins for LEDs
	DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3);
  82:	84 b3       	in	r24, 0x14	; 20
  84:	8f 60       	ori	r24, 0x0F	; 15
  86:	84 bb       	out	0x14, r24	; 20
	
	// Set PD0 and PD1 as output pins for status LEDs
	DDRD |= (1 << PD0) | (1 << PD1);
  88:	81 b3       	in	r24, 0x11	; 17
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	81 bb       	out	0x11, r24	; 17
	
	// Set PB0, PB1, PB2, and PB3 as input pins for push buttons
	DDRB &= ~((1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3));
  8e:	87 b3       	in	r24, 0x17	; 23
  90:	80 7f       	andi	r24, 0xF0	; 240
  92:	87 bb       	out	0x17, r24	; 23
	
	// Enable internal pull-up resistors for push buttons
	PORTB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	8f 60       	ori	r24, 0x0F	; 15
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <checkPassword>:
}

// Function to check if the entered password is correct
int checkPassword(int password[]) {
  9c:	cf 93       	push	r28
  9e:	df 93       	push	r29
  a0:	cd b7       	in	r28, 0x3d	; 61
  a2:	de b7       	in	r29, 0x3e	; 62
  a4:	28 97       	sbiw	r28, 0x08	; 8
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	f8 94       	cli
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0f be       	out	0x3f, r0	; 63
  ae:	cd bf       	out	0x3d, r28	; 61
	int storedPassword[PASSWORD_LENGTH] = PASSWORD;
  b0:	28 e0       	ldi	r18, 0x08	; 8
  b2:	e0 e6       	ldi	r30, 0x60	; 96
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	de 01       	movw	r26, r28
  b8:	11 96       	adiw	r26, 0x01	; 1
  ba:	01 90       	ld	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	2a 95       	dec	r18
  c0:	e1 f7       	brne	.-8      	; 0xba <checkPassword+0x1e>
	int i;
	
	for (i = 0; i < PASSWORD_LENGTH; i++) {
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	15 c0       	rjmp	.+42     	; 0xf2 <checkPassword+0x56>
		if (password[i] != storedPassword[i]) {
  c8:	9a 01       	movw	r18, r20
  ca:	22 0f       	add	r18, r18
  cc:	33 1f       	adc	r19, r19
  ce:	fc 01       	movw	r30, r24
  d0:	e2 0f       	add	r30, r18
  d2:	f3 1f       	adc	r31, r19
  d4:	60 81       	ld	r22, Z
  d6:	71 81       	ldd	r23, Z+1	; 0x01
  d8:	e1 e0       	ldi	r30, 0x01	; 1
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	ec 0f       	add	r30, r28
  de:	fd 1f       	adc	r31, r29
  e0:	e2 0f       	add	r30, r18
  e2:	f3 1f       	adc	r31, r19
  e4:	20 81       	ld	r18, Z
  e6:	31 81       	ldd	r19, Z+1	; 0x01
  e8:	62 17       	cp	r22, r18
  ea:	73 07       	cpc	r23, r19
  ec:	41 f4       	brne	.+16     	; 0xfe <checkPassword+0x62>
// Function to check if the entered password is correct
int checkPassword(int password[]) {
	int storedPassword[PASSWORD_LENGTH] = PASSWORD;
	int i;
	
	for (i = 0; i < PASSWORD_LENGTH; i++) {
  ee:	4f 5f       	subi	r20, 0xFF	; 255
  f0:	5f 4f       	sbci	r21, 0xFF	; 255
  f2:	44 30       	cpi	r20, 0x04	; 4
  f4:	51 05       	cpc	r21, r1
  f6:	44 f3       	brlt	.-48     	; 0xc8 <checkPassword+0x2c>
		if (password[i] != storedPassword[i]) {
			return 0;  // Password is incorrect
		}
	}
	
	return 1;  // Password is correct
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	02 c0       	rjmp	.+4      	; 0x102 <checkPassword+0x66>
	int storedPassword[PASSWORD_LENGTH] = PASSWORD;
	int i;
	
	for (i = 0; i < PASSWORD_LENGTH; i++) {
		if (password[i] != storedPassword[i]) {
			return 0;  // Password is incorrect
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	return 1;  // Password is correct
}
 102:	28 96       	adiw	r28, 0x08	; 8
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <main>:

int main() {
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	28 97       	sbiw	r28, 0x08	; 8
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
	int enteredPassword[PASSWORD_LENGTH] = {0};
 128:	fe 01       	movw	r30, r28
 12a:	31 96       	adiw	r30, 0x01	; 1
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	df 01       	movw	r26, r30
 130:	1d 92       	st	X+, r1
 132:	8a 95       	dec	r24
 134:	e9 f7       	brne	.-6      	; 0x130 <main+0x1c>
	int enteredCount = 0;
	int passwordCorrect = 0;
	int i;
	
	initialize();
 136:	0e 94 41 00 	call	0x82	; 0x82 <initialize>
	}
	
	return 1;  // Password is correct
}

int main() {
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
	
	initialize();
	
	while (1) {
		// Check if any push button is pressed
		if (!(PINB & (1 << PB0))) {
 13e:	b0 99       	sbic	0x16, 0	; 22
 140:	23 c0       	rjmp	.+70     	; 0x188 <main+0x74>
			enteredPassword[enteredCount] = 1;
 142:	fc 01       	movw	r30, r24
 144:	ee 0f       	add	r30, r30
 146:	ff 1f       	adc	r31, r31
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	2c 0f       	add	r18, r28
 14e:	3d 1f       	adc	r19, r29
 150:	e2 0f       	add	r30, r18
 152:	f3 1f       	adc	r31, r19
 154:	21 e0       	ldi	r18, 0x01	; 1
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	31 83       	std	Z+1, r19	; 0x01
 15a:	20 83       	st	Z, r18
			enteredCount++;
 15c:	ac 01       	movw	r20, r24
 15e:	4f 5f       	subi	r20, 0xFF	; 255
 160:	5f 4f       	sbci	r21, 0xFF	; 255
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
 162:	95 b3       	in	r25, 0x15	; 21
 164:	02 c0       	rjmp	.+4      	; 0x16a <main+0x56>
 166:	22 0f       	add	r18, r18
 168:	33 1f       	adc	r19, r19
 16a:	8a 95       	dec	r24
 16c:	e2 f7       	brpl	.-8      	; 0x166 <main+0x52>
 16e:	29 2b       	or	r18, r25
 170:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	3f e9       	ldi	r19, 0x9F	; 159
 174:	86 e8       	ldi	r24, 0x86	; 134
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	31 50       	subi	r19, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <main+0x64>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0x6e>
 182:	00 00       	nop
	
	while (1) {
		// Check if any push button is pressed
		if (!(PINB & (1 << PB0))) {
			enteredPassword[enteredCount] = 1;
			enteredCount++;
 184:	ca 01       	movw	r24, r20
 186:	7a c0       	rjmp	.+244    	; 0x27c <main+0x168>
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
			_delay_ms(500);  // Delay to debounce the button press
			} else if (!(PINB & (1 << PB1))) {
 188:	b1 99       	sbic	0x16, 1	; 22
 18a:	27 c0       	rjmp	.+78     	; 0x1da <main+0xc6>
			enteredPassword[enteredCount] = 2;
 18c:	fc 01       	movw	r30, r24
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	a1 e0       	ldi	r26, 0x01	; 1
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	ac 0f       	add	r26, r28
 198:	bd 1f       	adc	r27, r29
 19a:	ea 0f       	add	r30, r26
 19c:	fb 1f       	adc	r31, r27
 19e:	22 e0       	ldi	r18, 0x02	; 2
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	31 83       	std	Z+1, r19	; 0x01
 1a4:	20 83       	st	Z, r18
			enteredCount++;
 1a6:	ac 01       	movw	r20, r24
 1a8:	4f 5f       	subi	r20, 0xFF	; 255
 1aa:	5f 4f       	sbci	r21, 0xFF	; 255
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
 1ac:	65 b3       	in	r22, 0x15	; 21
 1ae:	21 e0       	ldi	r18, 0x01	; 1
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	f9 01       	movw	r30, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <main+0xa6>
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	8a 95       	dec	r24
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <main+0xa2>
 1be:	cf 01       	movw	r24, r30
 1c0:	86 2b       	or	r24, r22
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	ff e9       	ldi	r31, 0x9F	; 159
 1c6:	26 e8       	ldi	r18, 0x86	; 134
 1c8:	31 e0       	ldi	r19, 0x01	; 1
 1ca:	f1 50       	subi	r31, 0x01	; 1
 1cc:	20 40       	sbci	r18, 0x00	; 0
 1ce:	30 40       	sbci	r19, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0xb6>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0xc0>
 1d4:	00 00       	nop
			enteredCount++;
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
			_delay_ms(500);  // Delay to debounce the button press
			} else if (!(PINB & (1 << PB1))) {
			enteredPassword[enteredCount] = 2;
			enteredCount++;
 1d6:	ca 01       	movw	r24, r20
 1d8:	51 c0       	rjmp	.+162    	; 0x27c <main+0x168>
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
			_delay_ms(500);  // Delay to debounce the button press
			} else if (!(PINB & (1 << PB2))) {
 1da:	b2 99       	sbic	0x16, 2	; 22
 1dc:	27 c0       	rjmp	.+78     	; 0x22c <main+0x118>
			enteredPassword[enteredCount] = 3;
 1de:	fc 01       	movw	r30, r24
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	4c 0f       	add	r20, r28
 1ea:	5d 1f       	adc	r21, r29
 1ec:	e4 0f       	add	r30, r20
 1ee:	f5 1f       	adc	r31, r21
 1f0:	23 e0       	ldi	r18, 0x03	; 3
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	31 83       	std	Z+1, r19	; 0x01
 1f6:	20 83       	st	Z, r18
			enteredCount++;
 1f8:	ac 01       	movw	r20, r24
 1fa:	4f 5f       	subi	r20, 0xFF	; 255
 1fc:	5f 4f       	sbci	r21, 0xFF	; 255
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
 1fe:	65 b3       	in	r22, 0x15	; 21
 200:	21 e0       	ldi	r18, 0x01	; 1
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	d9 01       	movw	r26, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <main+0xf8>
 208:	aa 0f       	add	r26, r26
 20a:	bb 1f       	adc	r27, r27
 20c:	8a 95       	dec	r24
 20e:	e2 f7       	brpl	.-8      	; 0x208 <main+0xf4>
 210:	cd 01       	movw	r24, r26
 212:	86 2b       	or	r24, r22
 214:	85 bb       	out	0x15, r24	; 21
 216:	bf e9       	ldi	r27, 0x9F	; 159
 218:	e6 e8       	ldi	r30, 0x86	; 134
 21a:	f1 e0       	ldi	r31, 0x01	; 1
 21c:	b1 50       	subi	r27, 0x01	; 1
 21e:	e0 40       	sbci	r30, 0x00	; 0
 220:	f0 40       	sbci	r31, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <main+0x108>
 224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x112>
 226:	00 00       	nop
			enteredCount++;
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
			_delay_ms(500);  // Delay to debounce the button press
			} else if (!(PINB & (1 << PB2))) {
			enteredPassword[enteredCount] = 3;
			enteredCount++;
 228:	ca 01       	movw	r24, r20
 22a:	28 c0       	rjmp	.+80     	; 0x27c <main+0x168>
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
			_delay_ms(500);  // Delay to debounce the button press
			} else if (!(PINB & (1 << PB3))) {
 22c:	b3 99       	sbic	0x16, 3	; 22
 22e:	26 c0       	rjmp	.+76     	; 0x27c <main+0x168>
			enteredPassword[enteredCount] = 4;
 230:	fc 01       	movw	r30, r24
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	2c 0f       	add	r18, r28
 23c:	3d 1f       	adc	r19, r29
 23e:	e2 0f       	add	r30, r18
 240:	f3 1f       	adc	r31, r19
 242:	24 e0       	ldi	r18, 0x04	; 4
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	31 83       	std	Z+1, r19	; 0x01
 248:	20 83       	st	Z, r18
			enteredCount++;
 24a:	ac 01       	movw	r20, r24
 24c:	4f 5f       	subi	r20, 0xFF	; 255
 24e:	5f 4f       	sbci	r21, 0xFF	; 255
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
 250:	65 b3       	in	r22, 0x15	; 21
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	d9 01       	movw	r26, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <main+0x14a>
 25a:	aa 0f       	add	r26, r26
 25c:	bb 1f       	adc	r27, r27
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <main+0x146>
 262:	cd 01       	movw	r24, r26
 264:	86 2b       	or	r24, r22
 266:	85 bb       	out	0x15, r24	; 21
 268:	bf e9       	ldi	r27, 0x9F	; 159
 26a:	e6 e8       	ldi	r30, 0x86	; 134
 26c:	f1 e0       	ldi	r31, 0x01	; 1
 26e:	b1 50       	subi	r27, 0x01	; 1
 270:	e0 40       	sbci	r30, 0x00	; 0
 272:	f0 40       	sbci	r31, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x15a>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x164>
 278:	00 00       	nop
			enteredCount++;
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
			_delay_ms(500);  // Delay to debounce the button press
			} else if (!(PINB & (1 << PB3))) {
			enteredPassword[enteredCount] = 4;
			enteredCount++;
 27a:	ca 01       	movw	r24, r20
			PORTC |= (1 << enteredCount-1);  // Light up the corresponding input status LED
			_delay_ms(500);  // Delay to debounce the button press
		}
		
		// Check if all digits of the password have been entered
		if (enteredCount == PASSWORD_LENGTH) {
 27c:	84 30       	cpi	r24, 0x04	; 4
 27e:	91 05       	cpc	r25, r1
 280:	09 f0       	breq	.+2      	; 0x284 <main+0x170>
 282:	5d cf       	rjmp	.-326    	; 0x13e <main+0x2a>
			// Check if the entered password is correct
			passwordCorrect = checkPassword(enteredPassword);
 284:	ce 01       	movw	r24, r28
 286:	01 96       	adiw	r24, 0x01	; 1
 288:	0e 94 4e 00 	call	0x9c	; 0x9c <checkPassword>
			
			// Reset entered password
			enteredCount = 0;
			for (i = 0; i < PASSWORD_LENGTH; i++) {
 28c:	20 e0       	ldi	r18, 0x00	; 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	0d c0       	rjmp	.+26     	; 0x2ac <main+0x198>
				enteredPassword[i] = 0;
 292:	f9 01       	movw	r30, r18
 294:	ee 0f       	add	r30, r30
 296:	ff 1f       	adc	r31, r31
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	4c 0f       	add	r20, r28
 29e:	5d 1f       	adc	r21, r29
 2a0:	e4 0f       	add	r30, r20
 2a2:	f5 1f       	adc	r31, r21
 2a4:	11 82       	std	Z+1, r1	; 0x01
 2a6:	10 82       	st	Z, r1
			// Check if the entered password is correct
			passwordCorrect = checkPassword(enteredPassword);
			
			// Reset entered password
			enteredCount = 0;
			for (i = 0; i < PASSWORD_LENGTH; i++) {
 2a8:	2f 5f       	subi	r18, 0xFF	; 255
 2aa:	3f 4f       	sbci	r19, 0xFF	; 255
 2ac:	24 30       	cpi	r18, 0x04	; 4
 2ae:	31 05       	cpc	r19, r1
 2b0:	84 f3       	brlt	.-32     	; 0x292 <main+0x17e>
				enteredPassword[i] = 0;
			}
			
			// Light up the appropriate LED(s) based on password correctness
			if (passwordCorrect) {
 2b2:	89 2b       	or	r24, r25
 2b4:	39 f0       	breq	.+14     	; 0x2c4 <main+0x1b0>
				PORTD |= (1 << PD0);  // Green LED on
 2b6:	82 b3       	in	r24, 0x12	; 18
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	82 bb       	out	0x12, r24	; 18
				PORTD &= ~(1 << PD1);  // Red LED off
 2bc:	82 b3       	in	r24, 0x12	; 18
 2be:	8d 7f       	andi	r24, 0xFD	; 253
 2c0:	82 bb       	out	0x12, r24	; 18
 2c2:	06 c0       	rjmp	.+12     	; 0x2d0 <main+0x1bc>
				} else {
				PORTD |= (1 << PD1);  // Red LED on
 2c4:	82 b3       	in	r24, 0x12	; 18
 2c6:	82 60       	ori	r24, 0x02	; 2
 2c8:	82 bb       	out	0x12, r24	; 18
				PORTD &= ~(1 << PD0);  // Green LED off
 2ca:	82 b3       	in	r24, 0x12	; 18
 2cc:	8e 7f       	andi	r24, 0xFE	; 254
 2ce:	82 bb       	out	0x12, r24	; 18
 2d0:	5f e7       	ldi	r21, 0x7F	; 127
 2d2:	8a e1       	ldi	r24, 0x1A	; 26
 2d4:	96 e0       	ldi	r25, 0x06	; 6
 2d6:	51 50       	subi	r21, 0x01	; 1
 2d8:	80 40       	sbci	r24, 0x00	; 0
 2da:	90 40       	sbci	r25, 0x00	; 0
 2dc:	e1 f7       	brne	.-8      	; 0x2d6 <main+0x1c2>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <main+0x1cc>
 2e0:	00 00       	nop
			
			// Delay for a while to display the LED status
			_delay_ms(2000);
			
			// Turn off both LEDs
			PORTD &= ~((1 << PD0) | (1 << PD1));
 2e2:	82 b3       	in	r24, 0x12	; 18
 2e4:	8c 7f       	andi	r24, 0xFC	; 252
 2e6:	82 bb       	out	0x12, r24	; 18
			
			// Turn off all input status LEDs
			PORTC &= ~((1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3));
 2e8:	85 b3       	in	r24, 0x15	; 21
 2ea:	80 7f       	andi	r24, 0xF0	; 240
 2ec:	85 bb       	out	0x15, r24	; 21
 2ee:	25 cf       	rjmp	.-438    	; 0x13a <main+0x26>

000002f0 <_exit>:
 2f0:	f8 94       	cli

000002f2 <__stop_program>:
 2f2:	ff cf       	rjmp	.-2      	; 0x2f2 <__stop_program>
