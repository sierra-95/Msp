
LCd display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000150  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000870  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000657  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031f  00000000  00000000  0000113b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000145c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037c  00000000  00000000  000014d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000259  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001aa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  7a:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_Command>:
	LCD_Command(0x01);
	LCD_Command(0x80);
}

void LCD_Command(unsigned char cmnd) {
	LCD_Master_Data_Port = cmnd;
  82:	82 bb       	out	0x12, r24	; 18
	LCD_Master_Command_Port &= ~(1 << RS_Master);
  84:	82 b3       	in	r24, 0x12	; 18
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	82 bb       	out	0x12, r24	; 18
	LCD_Master_Command_Port |= (1 << EN_Master);
  8a:	82 b3       	in	r24, 0x12	; 18
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	82 e0       	ldi	r24, 0x02	; 2
  92:	8a 95       	dec	r24
  94:	f1 f7       	brne	.-4      	; 0x92 <LCD_Command+0x10>
  96:	00 c0       	rjmp	.+0      	; 0x98 <LCD_Command+0x16>
	_delay_us(1);
	LCD_Master_Command_Port &= ~(1 << EN_Master);
  98:	82 b3       	in	r24, 0x12	; 18
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	8f e6       	ldi	r24, 0x6F	; 111
  a0:	97 e1       	ldi	r25, 0x17	; 23
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <LCD_Command+0x20>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_Command+0x26>
  a8:	00 00       	nop
  aa:	08 95       	ret

000000ac <LCD_Init>:
#define LCD_Master_Command_Port PORTD
#define RS_Master PD0
#define EN_Master PD1

void LCD_Init() {
	LCD_Master_Command_Dir = 0xFF;
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	81 bb       	out	0x11, r24	; 17
	LCD_Master_Data_Dir = 0xFF;
  b0:	81 bb       	out	0x11, r24	; 17
  b2:	8f e3       	ldi	r24, 0x3F	; 63
  b4:	9c e9       	ldi	r25, 0x9C	; 156
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_Init+0xa>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_Init+0x10>
  bc:	00 00       	nop
	_delay_ms(20);
	LCD_Command(0x38);
  be:	88 e3       	ldi	r24, 0x38	; 56
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x0C);
  c6:	8c e0       	ldi	r24, 0x0C	; 12
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x06);
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x01);
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
	LCD_Command(0x80);
  de:	80 e8       	ldi	r24, 0x80	; 128
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 41 00 	call	0x82	; 0x82 <LCD_Command>
  e6:	08 95       	ret

000000e8 <LCD_Char>:
	LCD_Master_Command_Port &= ~(1 << EN_Master);
	_delay_ms(3);
}

void LCD_Char(unsigned char char_data) {
	LCD_Master_Data_Port = char_data;
  e8:	82 bb       	out	0x12, r24	; 18
	LCD_Master_Command_Port |= (1 << RS_Master);
  ea:	82 b3       	in	r24, 0x12	; 18
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	82 bb       	out	0x12, r24	; 18
	LCD_Master_Command_Port |= (1 << EN_Master);
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	8a 95       	dec	r24
  fa:	f1 f7       	brne	.-4      	; 0xf8 <LCD_Char+0x10>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_Char+0x16>
	_delay_us(1);
	LCD_Master_Command_Port &= ~(1 << EN_Master);
  fe:	82 b3       	in	r24, 0x12	; 18
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	8f ec       	ldi	r24, 0xCF	; 207
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Char+0x20>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <LCD_Char+0x26>
 10e:	00 00       	nop
 110:	08 95       	ret

00000112 <LCD_String>:
	_delay_ms(1);
}

void LCD_String(char *str) {
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	8c 01       	movw	r16, r24
	int i;
	for(i = 0; str[i] != 0; i++) {
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	03 c0       	rjmp	.+6      	; 0x128 <LCD_String+0x16>
		LCD_Char(str[i]);
 122:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_Char>
	_delay_ms(1);
}

void LCD_String(char *str) {
	int i;
	for(i = 0; str[i] != 0; i++) {
 126:	21 96       	adiw	r28, 0x01	; 1
 128:	f8 01       	movw	r30, r16
 12a:	ec 0f       	add	r30, r28
 12c:	fd 1f       	adc	r31, r29
 12e:	80 81       	ld	r24, Z
 130:	81 11       	cpse	r24, r1
 132:	f7 cf       	rjmp	.-18     	; 0x122 <LCD_String+0x10>
		LCD_Char(str[i]);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <main>:

int main(void) {
	LCD_Init();
 13e:	0e 94 56 00 	call	0xac	; 0xac <LCD_Init>
	LCD_String("Hey");
 142:	80 e6       	ldi	r24, 0x60	; 96
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 89 00 	call	0x112	; 0x112 <LCD_String>
 14a:	ff cf       	rjmp	.-2      	; 0x14a <main+0xc>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
