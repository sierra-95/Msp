
CLASS PROJECT 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000358  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800066  00800066  000003f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000981  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000614  00000000  00000000  00000e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000457  00000000  00000000  00001445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000fc  00000000  00000000  0000189c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  00001998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000547  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00002247  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_2>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 01 	call	0x2a6	; 0x2a6 <main>
  8a:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:

int no_inputs = 0;
int password[LENGTH] = {1,1,1};
int inputs[LENGTH] = {0,0,0};

ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
	// ISR of button 1
	if(no_inputs < LENGTH){
  a8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <no_inputs>
  ac:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <no_inputs+0x1>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	91 05       	cpc	r25, r1
  b4:	74 f4       	brge	.+28     	; 0xd2 <__vector_1+0x40>
		inputs[no_inputs] = 1;
  b6:	fc 01       	movw	r30, r24
  b8:	ee 0f       	add	r30, r30
  ba:	ff 1f       	adc	r31, r31
  bc:	ea 59       	subi	r30, 0x9A	; 154
  be:	ff 4f       	sbci	r31, 0xFF	; 255
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	31 83       	std	Z+1, r19	; 0x01
  c6:	20 83       	st	Z, r18
		no_inputs++;
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <no_inputs+0x1>
  ce:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <no_inputs>
	}
}
  d2:	ff 91       	pop	r31
  d4:	ef 91       	pop	r30
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	3f 91       	pop	r19
  dc:	2f 91       	pop	r18
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_2>:

ISR(INT1_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	3f 93       	push	r19
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	// ISR of button 2
	if(no_inputs < LENGTH){
  fe:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <no_inputs>
 102:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <no_inputs+0x1>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	91 05       	cpc	r25, r1
 10a:	74 f4       	brge	.+28     	; 0x128 <__vector_2+0x40>
		inputs[no_inputs] = 2;
 10c:	fc 01       	movw	r30, r24
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	ea 59       	subi	r30, 0x9A	; 154
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	22 e0       	ldi	r18, 0x02	; 2
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	31 83       	std	Z+1, r19	; 0x01
 11c:	20 83       	st	Z, r18
		no_inputs++;
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <no_inputs+0x1>
 124:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <no_inputs>
	}
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	3f 91       	pop	r19
 132:	2f 91       	pop	r18
 134:	0f 90       	pop	r0
 136:	0f be       	out	0x3f, r0	; 63
 138:	0f 90       	pop	r0
 13a:	1f 90       	pop	r1
 13c:	18 95       	reti

0000013e <__vector_3>:

ISR(INT2_vect){
 13e:	1f 92       	push	r1
 140:	0f 92       	push	r0
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	0f 92       	push	r0
 146:	11 24       	eor	r1, r1
 148:	2f 93       	push	r18
 14a:	3f 93       	push	r19
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	// ISR of button 3
	if(no_inputs < LENGTH){
 154:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <no_inputs>
 158:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <no_inputs+0x1>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	91 05       	cpc	r25, r1
 160:	74 f4       	brge	.+28     	; 0x17e <__vector_3+0x40>
		inputs[no_inputs] = 3;
 162:	fc 01       	movw	r30, r24
 164:	ee 0f       	add	r30, r30
 166:	ff 1f       	adc	r31, r31
 168:	ea 59       	subi	r30, 0x9A	; 154
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	23 e0       	ldi	r18, 0x03	; 3
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	31 83       	std	Z+1, r19	; 0x01
 172:	20 83       	st	Z, r18
		no_inputs++;
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <no_inputs+0x1>
 17a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <no_inputs>
	}
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <flashGreen>:


void flashGreen(){
	PORTC = 0b00000001;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	34 e3       	ldi	r19, 0x34	; 52
 19c:	9c e0       	ldi	r25, 0x0C	; 12
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	30 40       	sbci	r19, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <flashGreen+0xa>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <flashGreen+0x14>
 1a8:	00 00       	nop
	_delay_ms(500);
	PORTC = 0b00000000;
 1aa:	15 ba       	out	0x15, r1	; 21
 1ac:	2f ef       	ldi	r18, 0xFF	; 255
 1ae:	34 e3       	ldi	r19, 0x34	; 52
 1b0:	9c e0       	ldi	r25, 0x0C	; 12
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	30 40       	sbci	r19, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <flashGreen+0x1e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <flashGreen+0x28>
 1bc:	00 00       	nop
	_delay_ms(500);
	PORTC = 0b00000001;
 1be:	85 bb       	out	0x15, r24	; 21
 1c0:	2f ef       	ldi	r18, 0xFF	; 255
 1c2:	34 e3       	ldi	r19, 0x34	; 52
 1c4:	9c e0       	ldi	r25, 0x0C	; 12
 1c6:	21 50       	subi	r18, 0x01	; 1
 1c8:	30 40       	sbci	r19, 0x00	; 0
 1ca:	90 40       	sbci	r25, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <flashGreen+0x32>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <flashGreen+0x3c>
 1d0:	00 00       	nop
	_delay_ms(500);
	PORTC = 0b00000000;
 1d2:	15 ba       	out	0x15, r1	; 21
 1d4:	2f ef       	ldi	r18, 0xFF	; 255
 1d6:	34 e3       	ldi	r19, 0x34	; 52
 1d8:	9c e0       	ldi	r25, 0x0C	; 12
 1da:	21 50       	subi	r18, 0x01	; 1
 1dc:	30 40       	sbci	r19, 0x00	; 0
 1de:	90 40       	sbci	r25, 0x00	; 0
 1e0:	e1 f7       	brne	.-8      	; 0x1da <flashGreen+0x46>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <flashGreen+0x50>
 1e4:	00 00       	nop
	_delay_ms(500);
	PORTC = 0b00000001;
 1e6:	85 bb       	out	0x15, r24	; 21
 1e8:	2f ef       	ldi	r18, 0xFF	; 255
 1ea:	34 e3       	ldi	r19, 0x34	; 52
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	30 40       	sbci	r19, 0x00	; 0
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <flashGreen+0x5a>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <flashGreen+0x64>
 1f8:	00 00       	nop
	_delay_ms(500);
	PORTC = 0b00000000;
 1fa:	15 ba       	out	0x15, r1	; 21
 1fc:	9f ef       	ldi	r25, 0xFF	; 255
 1fe:	24 e3       	ldi	r18, 0x34	; 52
 200:	3c e0       	ldi	r19, 0x0C	; 12
 202:	91 50       	subi	r25, 0x01	; 1
 204:	20 40       	sbci	r18, 0x00	; 0
 206:	30 40       	sbci	r19, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <flashGreen+0x6e>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <flashGreen+0x78>
 20c:	00 00       	nop
 20e:	08 95       	ret

00000210 <flashRed>:
	_delay_ms(500);
}

void flashRed(){
	PORTC = 0b00000010;
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	85 bb       	out	0x15, r24	; 21
 214:	2f ef       	ldi	r18, 0xFF	; 255
 216:	34 e3       	ldi	r19, 0x34	; 52
 218:	9c e0       	ldi	r25, 0x0C	; 12
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	30 40       	sbci	r19, 0x00	; 0
 21e:	90 40       	sbci	r25, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <flashRed+0xa>
 222:	00 c0       	rjmp	.+0      	; 0x224 <flashRed+0x14>
 224:	00 00       	nop
	_delay_ms(500);
	PORTC = 0b00000000;
 226:	15 ba       	out	0x15, r1	; 21
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	34 e3       	ldi	r19, 0x34	; 52
 22c:	9c e0       	ldi	r25, 0x0C	; 12
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	30 40       	sbci	r19, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <flashRed+0x1e>
 236:	00 c0       	rjmp	.+0      	; 0x238 <flashRed+0x28>
 238:	00 00       	nop
	_delay_ms(500);
	PORTC = 0b00000010;
 23a:	85 bb       	out	0x15, r24	; 21
 23c:	2f ef       	ldi	r18, 0xFF	; 255
 23e:	34 e3       	ldi	r19, 0x34	; 52
 240:	9c e0       	ldi	r25, 0x0C	; 12
 242:	21 50       	subi	r18, 0x01	; 1
 244:	30 40       	sbci	r19, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <flashRed+0x32>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <flashRed+0x3c>
 24c:	00 00       	nop
	_delay_ms(500);
	PORTC = 0b00000000;
 24e:	15 ba       	out	0x15, r1	; 21
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	34 e3       	ldi	r19, 0x34	; 52
 254:	9c e0       	ldi	r25, 0x0C	; 12
 256:	21 50       	subi	r18, 0x01	; 1
 258:	30 40       	sbci	r19, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <flashRed+0x46>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <flashRed+0x50>
 260:	00 00       	nop
	_delay_ms(500);
	PORTC = 0b00000010;
 262:	85 bb       	out	0x15, r24	; 21
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	34 e3       	ldi	r19, 0x34	; 52
 268:	8c e0       	ldi	r24, 0x0C	; 12
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	30 40       	sbci	r19, 0x00	; 0
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <flashRed+0x5a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <flashRed+0x64>
 274:	00 00       	nop
	_delay_ms(500);
	PORTC = 0b00000000;
 276:	15 ba       	out	0x15, r1	; 21
 278:	9f ef       	ldi	r25, 0xFF	; 255
 27a:	24 e3       	ldi	r18, 0x34	; 52
 27c:	3c e0       	ldi	r19, 0x0C	; 12
 27e:	91 50       	subi	r25, 0x01	; 1
 280:	20 40       	sbci	r18, 0x00	; 0
 282:	30 40       	sbci	r19, 0x00	; 0
 284:	e1 f7       	brne	.-8      	; 0x27e <flashRed+0x6e>
 286:	00 c0       	rjmp	.+0      	; 0x288 <flashRed+0x78>
 288:	00 00       	nop
 28a:	08 95       	ret

0000028c <systemReset>:
	_delay_ms(500);
}

void systemReset(){
	no_inputs = 0;
 28c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <no_inputs+0x1>
 290:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <no_inputs>
	inputs[0] = 0;
 294:	e6 e6       	ldi	r30, 0x66	; 102
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	11 82       	std	Z+1, r1	; 0x01
 29a:	10 82       	st	Z, r1
	inputs[1] = 0;
 29c:	13 82       	std	Z+3, r1	; 0x03
 29e:	12 82       	std	Z+2, r1	; 0x02
	inputs[2] = 0;
 2a0:	15 82       	std	Z+5, r1	; 0x05
 2a2:	14 82       	std	Z+4, r1	; 0x04
 2a4:	08 95       	ret

000002a6 <main>:
}

int main(void)
{
	// Setup inputs and outputs
	DDRB = 0x00;
 2a6:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x04; //0b00000100
 2a8:	84 e0       	ldi	r24, 0x04	; 4
 2aa:	88 bb       	out	0x18, r24	; 24
	DDRD = 0x00;
 2ac:	11 ba       	out	0x11, r1	; 17
	PORTD = 0x0C; //0b00001100
 2ae:	8c e0       	ldi	r24, 0x0C	; 12
 2b0:	82 bb       	out	0x12, r24	; 18
	
	DDRC = 0x1F;
 2b2:	9f e1       	ldi	r25, 0x1F	; 31
 2b4:	94 bb       	out	0x14, r25	; 20
	
	//Setup the Interrupts
	/* Interrupt setup */
	GICR = 1<<INT0 | 1<<INT1 | 1<<INT2; /* Enable INT0, INT1, INT2*/
 2b6:	90 ee       	ldi	r25, 0xE0	; 224
 2b8:	9b bf       	out	0x3b, r25	; 59
	MCUCR = 1<<ISC01 | 1<<ISC00; /* Trigger INT0 on rising edge */
 2ba:	93 e0       	ldi	r25, 0x03	; 3
 2bc:	95 bf       	out	0x35, r25	; 53
	MCUCR = 1<<ISC11 | 1<<ISC10; /* Trigger INT1 on rising edge */
 2be:	85 bf       	out	0x35, r24	; 53
	MCUCSR = 1<<ISC2; /* Trigger INT2 on rising edge */
 2c0:	80 e4       	ldi	r24, 0x40	; 64
 2c2:	84 bf       	out	0x34, r24	; 52
	sei(); /*global interrupt enable*/
 2c4:	78 94       	sei
	
    /* Replace with your application code */
    while (1) {
		// We need to check the number of inputs
		switch(no_inputs){
 2c6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <no_inputs>
 2ca:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <no_inputs+0x1>
 2ce:	82 30       	cpi	r24, 0x02	; 2
 2d0:	91 05       	cpc	r25, r1
 2d2:	49 f0       	breq	.+18     	; 0x2e6 <main+0x40>
 2d4:	83 30       	cpi	r24, 0x03	; 3
 2d6:	91 05       	cpc	r25, r1
 2d8:	51 f0       	breq	.+20     	; 0x2ee <main+0x48>
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	61 f4       	brne	.+24     	; 0x2f6 <main+0x50>
		case 1:
		//		   76543210
		 PORTC |= 0b00000100;
 2de:	85 b3       	in	r24, 0x15	; 21
 2e0:	84 60       	ori	r24, 0x04	; 4
 2e2:	85 bb       	out	0x15, r24	; 21
		 break;
 2e4:	09 c0       	rjmp	.+18     	; 0x2f8 <main+0x52>
		case 2: 
		//		   76543210
		PORTC |= 0b00001000;
 2e6:	85 b3       	in	r24, 0x15	; 21
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	85 bb       	out	0x15, r24	; 21
		break;	 
 2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <main+0x52>
		case 3:
		//		   76543210
		PORTC |= 0b00010000;
 2ee:	85 b3       	in	r24, 0x15	; 21
 2f0:	80 61       	ori	r24, 0x10	; 16
 2f2:	85 bb       	out	0x15, r24	; 21
		break;
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <main+0x52>
		default:
		PORTC = 0x00;
 2f6:	15 ba       	out	0x15, r1	; 21
		}
		
		if(no_inputs == LENGTH){
 2f8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <no_inputs>
 2fc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <no_inputs+0x1>
 300:	03 97       	sbiw	r24, 0x03	; 3
 302:	09 f7       	brne	.-62     	; 0x2c6 <main+0x20>
 304:	15 c0       	rjmp	.+42     	; 0x330 <main+0x8a>
			int check = 0;
			for(int i = 0; i < LENGTH; i++){
				if(password[i] == inputs[i]){
 306:	c9 01       	movw	r24, r18
 308:	88 0f       	add	r24, r24
 30a:	99 1f       	adc	r25, r25
 30c:	fc 01       	movw	r30, r24
 30e:	e0 5a       	subi	r30, 0xA0	; 160
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	40 81       	ld	r20, Z
 314:	51 81       	ldd	r21, Z+1	; 0x01
 316:	fc 01       	movw	r30, r24
 318:	ea 59       	subi	r30, 0x9A	; 154
 31a:	ff 4f       	sbci	r31, 0xFF	; 255
 31c:	80 81       	ld	r24, Z
 31e:	91 81       	ldd	r25, Z+1	; 0x01
 320:	48 17       	cp	r20, r24
 322:	59 07       	cpc	r21, r25
 324:	11 f4       	brne	.+4      	; 0x32a <main+0x84>
					check++;
 326:	6f 5f       	subi	r22, 0xFF	; 255
 328:	7f 4f       	sbci	r23, 0xFF	; 255
		PORTC = 0x00;
		}
		
		if(no_inputs == LENGTH){
			int check = 0;
			for(int i = 0; i < LENGTH; i++){
 32a:	2f 5f       	subi	r18, 0xFF	; 255
 32c:	3f 4f       	sbci	r19, 0xFF	; 255
 32e:	04 c0       	rjmp	.+8      	; 0x338 <main+0x92>
 330:	20 e0       	ldi	r18, 0x00	; 0
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	23 30       	cpi	r18, 0x03	; 3
 33a:	31 05       	cpc	r19, r1
 33c:	24 f3       	brlt	.-56     	; 0x306 <main+0x60>
				if(password[i] == inputs[i]){
					check++;
				}
			}
			
			if(check == 3){
 33e:	63 30       	cpi	r22, 0x03	; 3
 340:	71 05       	cpc	r23, r1
 342:	19 f4       	brne	.+6      	; 0x34a <main+0xa4>
				flashGreen();
 344:	0e 94 ca 00 	call	0x194	; 0x194 <flashGreen>
 348:	02 c0       	rjmp	.+4      	; 0x34e <main+0xa8>
			}else{
				flashRed();
 34a:	0e 94 08 01 	call	0x210	; 0x210 <flashRed>
			}
			systemReset();
 34e:	0e 94 46 01 	call	0x28c	; 0x28c <systemReset>
 352:	b9 cf       	rjmp	.-142    	; 0x2c6 <main+0x20>

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
